=begin
#DueDil API v4

#Welcome to the DueDil API v4, which provides programmatic access to DueDil's comprehensive company data. It can be used to enhance a wide variety of business functions, from auto-populating website forms to verifying customer credentials.  ### Getting started In order to make requests, you'll need to obtain an API key. Please visit https://www.duedil.com/api for more information. Once you have an API key, requests can be made using a UI such as [Postman](https://www.getpostman.com/) or via a terminal using [curl](https://curl.haxx.se/docs/manual.html). An example curl request should look as follows:  ``` curl -X GET --header 'Accept: application/json' --header 'X-AUTH-TOKEN: api_key' 'https://duedil.io/v4/company/gb/06999618.json' ```  ### Generating clients  This API has been authored using the [OpenAPI](https://en.wikipedia.org/wiki/OpenAPI_Specification) (Swagger) specification. Being machine readable, it can be used to generate V4 API clients in a range of languages. To create a client:   * Open the [Swagger Editor](http://editor.swagger.io/).  * Select 'File', 'Import URL' then enter https://duedil.io/v4/swagger.json  * Select 'Generate Client' then choose from over 30 languages such as PHP, Python and Java.  ### International data  DueDil provides a wide range of data spanning across multiple geographic regions. Our international package currently includes company information from the following countries:  | Country              |    | Country       |    | |----------------------|----|---------------|----| | Albania              | AL | Jersey        | JE | | Bahamas              | BS | Latvia        | LV | | Belgium              | BE | Liechtenstein | LI | | Bermuda              | BM | Luxembourg    | LU | | Hong Kong, SAR China | HK | Malta         | MT | | Cyprus               | CY | Montenegro    | ME | | Denmark              | DK | Netherlands   | NL | | Finland              | FI | Norway        | NO | | France               | FR | Poland        | PL | | Germany              | DE | Romania       | RO | | Greenland            | GL | Slovakia      | SK | | Guernsey             | GG | Slovenia      | SI | | Iceland              | IS | Sweden        | SE | | Isle of Man          | IM | Switzerland   | CH | | Israel               | IL |               |    |  Retrieving international data is simple. Construct your request with the corresponding country code. For the German company [Daimler AG](https://www.duedil.com/company/de/Stuttgart%20HRB%2019360/daimler-ag) you should construct your request URI as follows:  ``` curl -X GET --header 'Accept: application/json' --header 'X-AUTH-TOKEN: api_key' 'https://duedil.io/v4/company/de/Stuttgart%20HRB%2019360.json' ```  For Companies search, the country code should be included in the post body:  ``` {     \"criteria\": {         \"name\": \"Daimler AG\",         \"countryCodes\": {             \"values\": [\"DE\", \"FR\"]         }     } } ```  **Note:** You will need to have international access added to your plan to search for and retrieve information for companies outside of the United Kingdom (GB) and Ireland (IE).  #### Data coverage  While 100% coverage is our goal, this is not feasible for every international country at present. If we cannot find the entity you are requesting, the API will return HTTP 404 with message “Resource not found”. Partial responses can include null fields where specific data is unavailable.  ### Pagination  All endpoints that return collections can be paginated in the same way through two optional parameters (`limit` and `offset`). The `offset` parameter determines the 0-based index of the first element of the collection to be returned, which defaults to 0. The `limit` parameter sets the maximum number of items from the collection to be returned, which defaults to 10. The maximum allowed limit parameter is 50.  **Note:** API keys issued for evaluation purposes will have limited access to the first 10 search results only. Other non-search endpoints do not apply this constraint.   Every response from a paginated endpoint contains a top-level property called `pagination`, which in turn contains the `offset` and `limit` values used in the API call, as well as the `total` number of items in the collection. For instance:   ``` \"pagination\": {   \"offset\": 0,   \"limit\": 10,   \"total\": 12 } ```   In the example above, an API call with `offset` = 10 and `limit` = 10 would return the 11th and 12th items in the collection, whereas an API call with `offset` = 20 and `limit` = 10 would return a successful response (200 HTTP code) with an empty collection. Calls with invalid `offset`/`limit` parameters, such as negative values, return an error (400 HTTP code). 

OpenAPI spec version: 4.4.19

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class CompanyFinancialsFinancials
    attr_accessor :accounts_date

    attr_accessor :reporting_period

    attr_accessor :currency

    attr_accessor :consolidated_accounts

    attr_accessor :audit_qualification

    attr_accessor :number_of_employees

    # Revenue generated from business activities
    attr_accessor :turnover

    # Direct costs to the business of generating the Turnover
    attr_accessor :cost_of_sales

    # Selling, general, administrative and other non-production costs of operating the business
    attr_accessor :sga_plus_other_net_costs

    # Profit generated from principal trading activities, calculated by subtracting operating expenses from Gross Profit
    attr_accessor :operating_profit

    attr_accessor :interest_receivable

    attr_accessor :interest_payable

    # Profit generated before taxation
    attr_accessor :pre_tax_profit

    # A negative number indicates a tax charge to the business
    attr_accessor :taxation

    # Profit generated after taxation
    attr_accessor :post_tax_profit

    # Profit distributed to shareholders
    attr_accessor :dividends_payable

    # Undistributed profits retained within the business
    attr_accessor :retained_profits

    # A company's fixed assets that have no physical presence, such as copyrights, patents, and brand names
    attr_accessor :intangible_assets

    # A company's fixed assets that have a physical presence, such as property and machinery
    attr_accessor :tangible_assets

    # Investment and other assets held by a company
    attr_accessor :investments_and_other_assets

    # The sum of Tangible Assets, Intangible Assets and Investments
    attr_accessor :fixed_assets

    # Goods for resale
    attr_accessor :stock

    # Amounts owed by customers
    attr_accessor :trade_debtors

    # Amounts owed by other sources
    attr_accessor :other_debtors

    # Unspecified assets due within one year of the accounts date
    attr_accessor :miscellaneous_current_assets

    # Cash in hand and in the bank
    attr_accessor :cash

    # The sum of Stock, Trade Debtors, Cash and other assets due within one year of the accounts date
    attr_accessor :current_assets

    # The value of all assets on the Balance Sheet
    attr_accessor :total_assets

    attr_accessor :bank_loans_and_overdrafts

    # Amounts owed to suppliers
    attr_accessor :trade_creditors

    # Unspecified liabilities due within one year of accounts date
    attr_accessor :miscellaneous_current_liabilities

    # Amounts owed to other sources
    attr_accessor :other_short_term_finances

    # The sum of Trade Creditors and other liabilities due within one year of accounts date
    attr_accessor :current_liabilities

    # A potential obligation dependent on the outcome of a future event
    attr_accessor :contingent_liabilities

    attr_accessor :other_long_term_finances

    # The sum of liabilities due after one year of the accounts date
    attr_accessor :total_long_term_liabilities

    # The total value of all amounts owed (long term and short term)
    attr_accessor :total_liabilities

    # Total Assets less Total Liabilities
    attr_accessor :net_assets

    # The amount of capital that has been funded by shareholders
    attr_accessor :equity_paid_up

    # Used when the value of an asset becomes greater than the value at which it was previously carried on the balance sheet
    attr_accessor :revaluation_reserve

    # Capital reservers, Share premium account, and other company reserves
    attr_accessor :sundry_reserves

    # The (fully distributable) balance of retained earnings to carry forward
    attr_accessor :profit_and_loss_account_reserve

    # Equity Payed Up plus reservers; equivalent to Net Assets
    attr_accessor :shareholder_funds

    # The cost associated with reducing the value of tangible fixed assets over their useful life
    attr_accessor :depreciation

    # The cost associated with reducing the value of intangible fixed assets over their useful life
    attr_accessor :amortisation_of_intangibles

    # Earnings before interest, tax, depreciation and amortization
    attr_accessor :ebitda

    # Current Assets less Current Liabilities
    attr_accessor :working_capital

    # Total Assets less Current Liabilities; equivalent to Fixed Assets plus Working Capital
    attr_accessor :capital_employed

    attr_accessor :wages_and_salaries

    attr_accessor :directors_emoluments

    attr_accessor :audit_fees

    attr_accessor :bank_overdraft_and_long_term_loans

    attr_accessor :net_cash_flow_from_operations

    attr_accessor :net_cash_flow_before_financing

    attr_accessor :net_cash_flow_from_financing

    attr_accessor :increase_in_cash

    # Trade Debtors expressed as number of days of Turnover
    attr_accessor :debtor_days

    # Turnover from overseas (often reported in the notes to the financial accounts)
    attr_accessor :exports

    attr_accessor :gross_margin_percentage

    attr_accessor :operating_profit_margin_percentage

    attr_accessor :ebitda_margin_percentage

    attr_accessor :pre_tax_profit_margin_percentage

    attr_accessor :net_margin_percentage

    attr_accessor :return_on_assets_percentage

    attr_accessor :return_on_capital_employed_percentage

    attr_accessor :return_on_equity

    attr_accessor :current_ratio

    attr_accessor :cash_to_current_liabilities_ratio

    attr_accessor :cash_to_total_assets_percentage

    attr_accessor :liquidity_ratio

    attr_accessor :gearing_percentage_on_liability_basis

    attr_accessor :gearing_percentage_on_gross_debt_basis

    attr_accessor :gearing_percentage_on_net_debt_basis

    attr_accessor :debt_to_capital_percentage

    attr_accessor :inventory_turnover_ratio

    attr_accessor :cash_to_turnover_ratio

    attr_accessor :cash_to_turnover_percentage

    attr_accessor :days_inventory_outstanding

    attr_accessor :days_sales_outstanding

    attr_accessor :days_payable_outstanding

    attr_accessor :cash_conversion_cycle

    attr_accessor :revenue_per_employee

    attr_accessor :human_capital_value_added

    attr_accessor :interest_coverage_ratio

    attr_accessor :net_debt_to_ebitda_ratio

    attr_accessor :cfo_to_sales_ratio

    attr_accessor :auditor

    attr_accessor :joint_auditor

    attr_accessor :solicitor

    attr_accessor :accountant


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'accounts_date' => :'accountsDate',
        :'reporting_period' => :'reportingPeriod',
        :'currency' => :'currency',
        :'consolidated_accounts' => :'consolidatedAccounts',
        :'audit_qualification' => :'auditQualification',
        :'number_of_employees' => :'numberOfEmployees',
        :'turnover' => :'turnover',
        :'cost_of_sales' => :'costOfSales',
        :'sga_plus_other_net_costs' => :'sgaPlusOtherNetCosts',
        :'operating_profit' => :'operatingProfit',
        :'interest_receivable' => :'interestReceivable',
        :'interest_payable' => :'interestPayable',
        :'pre_tax_profit' => :'preTaxProfit',
        :'taxation' => :'taxation',
        :'post_tax_profit' => :'postTaxProfit',
        :'dividends_payable' => :'dividendsPayable',
        :'retained_profits' => :'retainedProfits',
        :'intangible_assets' => :'intangibleAssets',
        :'tangible_assets' => :'tangibleAssets',
        :'investments_and_other_assets' => :'investmentsAndOtherAssets',
        :'fixed_assets' => :'fixedAssets',
        :'stock' => :'stock',
        :'trade_debtors' => :'tradeDebtors',
        :'other_debtors' => :'otherDebtors',
        :'miscellaneous_current_assets' => :'miscellaneousCurrentAssets',
        :'cash' => :'cash',
        :'current_assets' => :'currentAssets',
        :'total_assets' => :'totalAssets',
        :'bank_loans_and_overdrafts' => :'bankLoansAndOverdrafts',
        :'trade_creditors' => :'tradeCreditors',
        :'miscellaneous_current_liabilities' => :'miscellaneousCurrentLiabilities',
        :'other_short_term_finances' => :'otherShortTermFinances',
        :'current_liabilities' => :'currentLiabilities',
        :'contingent_liabilities' => :'contingentLiabilities',
        :'other_long_term_finances' => :'otherLongTermFinances',
        :'total_long_term_liabilities' => :'totalLongTermLiabilities',
        :'total_liabilities' => :'totalLiabilities',
        :'net_assets' => :'netAssets',
        :'equity_paid_up' => :'equityPaidUp',
        :'revaluation_reserve' => :'revaluationReserve',
        :'sundry_reserves' => :'sundryReserves',
        :'profit_and_loss_account_reserve' => :'profitAndLossAccountReserve',
        :'shareholder_funds' => :'shareholderFunds',
        :'depreciation' => :'depreciation',
        :'amortisation_of_intangibles' => :'amortisationOfIntangibles',
        :'ebitda' => :'ebitda',
        :'working_capital' => :'workingCapital',
        :'capital_employed' => :'capitalEmployed',
        :'wages_and_salaries' => :'wagesAndSalaries',
        :'directors_emoluments' => :'directorsEmoluments',
        :'audit_fees' => :'auditFees',
        :'bank_overdraft_and_long_term_loans' => :'bankOverdraftAndLongTermLoans',
        :'net_cash_flow_from_operations' => :'netCashFlowFromOperations',
        :'net_cash_flow_before_financing' => :'netCashFlowBeforeFinancing',
        :'net_cash_flow_from_financing' => :'netCashFlowFromFinancing',
        :'increase_in_cash' => :'increaseInCash',
        :'debtor_days' => :'debtorDays',
        :'exports' => :'exports',
        :'gross_margin_percentage' => :'grossMarginPercentage',
        :'operating_profit_margin_percentage' => :'operatingProfitMarginPercentage',
        :'ebitda_margin_percentage' => :'ebitdaMarginPercentage',
        :'pre_tax_profit_margin_percentage' => :'preTaxProfitMarginPercentage',
        :'net_margin_percentage' => :'netMarginPercentage',
        :'return_on_assets_percentage' => :'returnOnAssetsPercentage',
        :'return_on_capital_employed_percentage' => :'returnOnCapitalEmployedPercentage',
        :'return_on_equity' => :'returnOnEquity',
        :'current_ratio' => :'currentRatio',
        :'cash_to_current_liabilities_ratio' => :'cashToCurrentLiabilitiesRatio',
        :'cash_to_total_assets_percentage' => :'cashToTotalAssetsPercentage',
        :'liquidity_ratio' => :'liquidityRatio',
        :'gearing_percentage_on_liability_basis' => :'gearingPercentageOnLiabilityBasis',
        :'gearing_percentage_on_gross_debt_basis' => :'gearingPercentageOnGrossDebtBasis',
        :'gearing_percentage_on_net_debt_basis' => :'gearingPercentageOnNetDebtBasis',
        :'debt_to_capital_percentage' => :'debtToCapitalPercentage',
        :'inventory_turnover_ratio' => :'inventoryTurnoverRatio',
        :'cash_to_turnover_ratio' => :'cashToTurnoverRatio',
        :'cash_to_turnover_percentage' => :'cashToTurnoverPercentage',
        :'days_inventory_outstanding' => :'daysInventoryOutstanding',
        :'days_sales_outstanding' => :'daysSalesOutstanding',
        :'days_payable_outstanding' => :'daysPayableOutstanding',
        :'cash_conversion_cycle' => :'cashConversionCycle',
        :'revenue_per_employee' => :'revenuePerEmployee',
        :'human_capital_value_added' => :'humanCapitalValueAdded',
        :'interest_coverage_ratio' => :'interestCoverageRatio',
        :'net_debt_to_ebitda_ratio' => :'netDebtToEBITDARatio',
        :'cfo_to_sales_ratio' => :'cfoToSalesRatio',
        :'auditor' => :'auditor',
        :'joint_auditor' => :'jointAuditor',
        :'solicitor' => :'solicitor',
        :'accountant' => :'accountant'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'accounts_date' => :'Date',
        :'reporting_period' => :'Integer',
        :'currency' => :'String',
        :'consolidated_accounts' => :'BOOLEAN',
        :'audit_qualification' => :'String',
        :'number_of_employees' => :'Object',
        :'turnover' => :'Object',
        :'cost_of_sales' => :'Object',
        :'sga_plus_other_net_costs' => :'Object',
        :'operating_profit' => :'Object',
        :'interest_receivable' => :'Object',
        :'interest_payable' => :'Object',
        :'pre_tax_profit' => :'Object',
        :'taxation' => :'Object',
        :'post_tax_profit' => :'Object',
        :'dividends_payable' => :'Object',
        :'retained_profits' => :'Object',
        :'intangible_assets' => :'Object',
        :'tangible_assets' => :'Object',
        :'investments_and_other_assets' => :'Object',
        :'fixed_assets' => :'Object',
        :'stock' => :'Object',
        :'trade_debtors' => :'Object',
        :'other_debtors' => :'Object',
        :'miscellaneous_current_assets' => :'Object',
        :'cash' => :'Object',
        :'current_assets' => :'Object',
        :'total_assets' => :'Object',
        :'bank_loans_and_overdrafts' => :'Object',
        :'trade_creditors' => :'Object',
        :'miscellaneous_current_liabilities' => :'Object',
        :'other_short_term_finances' => :'Object',
        :'current_liabilities' => :'Object',
        :'contingent_liabilities' => :'Object',
        :'other_long_term_finances' => :'Object',
        :'total_long_term_liabilities' => :'Object',
        :'total_liabilities' => :'Object',
        :'net_assets' => :'Object',
        :'equity_paid_up' => :'Object',
        :'revaluation_reserve' => :'Object',
        :'sundry_reserves' => :'Object',
        :'profit_and_loss_account_reserve' => :'Object',
        :'shareholder_funds' => :'Object',
        :'depreciation' => :'Object',
        :'amortisation_of_intangibles' => :'Object',
        :'ebitda' => :'Object',
        :'working_capital' => :'Object',
        :'capital_employed' => :'Object',
        :'wages_and_salaries' => :'Object',
        :'directors_emoluments' => :'Object',
        :'audit_fees' => :'Object',
        :'bank_overdraft_and_long_term_loans' => :'Object',
        :'net_cash_flow_from_operations' => :'Object',
        :'net_cash_flow_before_financing' => :'Object',
        :'net_cash_flow_from_financing' => :'Object',
        :'increase_in_cash' => :'Object',
        :'debtor_days' => :'Object',
        :'exports' => :'Object',
        :'gross_margin_percentage' => :'CompanyFinancialsGrossMarginPercentage',
        :'operating_profit_margin_percentage' => :'CompanyFinancialsOperatingProfitMarginPercentage',
        :'ebitda_margin_percentage' => :'CompanyFinancialsEbitdaMarginPercentage',
        :'pre_tax_profit_margin_percentage' => :'CompanyFinancialsPreTaxProfitMarginPercentage',
        :'net_margin_percentage' => :'CompanyFinancialsNetMarginPercentage',
        :'return_on_assets_percentage' => :'CompanyFinancialsReturnOnAssetsPercentage',
        :'return_on_capital_employed_percentage' => :'CompanyFinancialsReturnOnCapitalEmployedPercentage',
        :'return_on_equity' => :'CompanyFinancialsReturnOnEquity',
        :'current_ratio' => :'CompanyFinancialsCurrentRatio',
        :'cash_to_current_liabilities_ratio' => :'CompanyFinancialsCashToCurrentLiabilitiesRatio',
        :'cash_to_total_assets_percentage' => :'CompanyFinancialsCashToTotalAssetsPercentage',
        :'liquidity_ratio' => :'CompanyFinancialsLiquidityRatio',
        :'gearing_percentage_on_liability_basis' => :'CompanyFinancialsGearingPercentageOnLiabilityBasis',
        :'gearing_percentage_on_gross_debt_basis' => :'CompanyFinancialsGearingPercentageOnGrossDebtBasis',
        :'gearing_percentage_on_net_debt_basis' => :'CompanyFinancialsGearingPercentageOnNetDebtBasis',
        :'debt_to_capital_percentage' => :'CompanyFinancialsDebtToCapitalPercentage',
        :'inventory_turnover_ratio' => :'CompanyFinancialsInventoryTurnoverRatio',
        :'cash_to_turnover_ratio' => :'CompanyFinancialsCashToTurnoverRatio',
        :'cash_to_turnover_percentage' => :'CompanyFinancialsCashToTurnoverPercentage',
        :'days_inventory_outstanding' => :'CompanyFinancialsDaysInventoryOutstanding',
        :'days_sales_outstanding' => :'CompanyFinancialsDaysSalesOutstanding',
        :'days_payable_outstanding' => :'CompanyFinancialsDaysPayableOutstanding',
        :'cash_conversion_cycle' => :'CompanyFinancialsCashConversionCycle',
        :'revenue_per_employee' => :'CompanyFinancialsRevenuePerEmployee',
        :'human_capital_value_added' => :'CompanyFinancialsHumanCapitalValueAdded',
        :'interest_coverage_ratio' => :'CompanyFinancialsInterestCoverageRatio',
        :'net_debt_to_ebitda_ratio' => :'CompanyFinancialsNetDebtToEBITDARatio',
        :'cfo_to_sales_ratio' => :'CompanyFinancialsCfoToSalesRatio',
        :'auditor' => :'CompanyFinancialsAuditor',
        :'joint_auditor' => :'CompanyFinancialsAuditor',
        :'solicitor' => :'CompanyFinancialsAuditor',
        :'accountant' => :'CompanyFinancialsAuditor'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'accountsDate')
        self.accounts_date = attributes[:'accountsDate']
      end

      if attributes.has_key?(:'reportingPeriod')
        self.reporting_period = attributes[:'reportingPeriod']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'consolidatedAccounts')
        self.consolidated_accounts = attributes[:'consolidatedAccounts']
      end

      if attributes.has_key?(:'auditQualification')
        self.audit_qualification = attributes[:'auditQualification']
      end

      if attributes.has_key?(:'numberOfEmployees')
        self.number_of_employees = attributes[:'numberOfEmployees']
      end

      if attributes.has_key?(:'turnover')
        self.turnover = attributes[:'turnover']
      end

      if attributes.has_key?(:'costOfSales')
        self.cost_of_sales = attributes[:'costOfSales']
      end

      if attributes.has_key?(:'sgaPlusOtherNetCosts')
        self.sga_plus_other_net_costs = attributes[:'sgaPlusOtherNetCosts']
      end

      if attributes.has_key?(:'operatingProfit')
        self.operating_profit = attributes[:'operatingProfit']
      end

      if attributes.has_key?(:'interestReceivable')
        self.interest_receivable = attributes[:'interestReceivable']
      end

      if attributes.has_key?(:'interestPayable')
        self.interest_payable = attributes[:'interestPayable']
      end

      if attributes.has_key?(:'preTaxProfit')
        self.pre_tax_profit = attributes[:'preTaxProfit']
      end

      if attributes.has_key?(:'taxation')
        self.taxation = attributes[:'taxation']
      end

      if attributes.has_key?(:'postTaxProfit')
        self.post_tax_profit = attributes[:'postTaxProfit']
      end

      if attributes.has_key?(:'dividendsPayable')
        self.dividends_payable = attributes[:'dividendsPayable']
      end

      if attributes.has_key?(:'retainedProfits')
        self.retained_profits = attributes[:'retainedProfits']
      end

      if attributes.has_key?(:'intangibleAssets')
        self.intangible_assets = attributes[:'intangibleAssets']
      end

      if attributes.has_key?(:'tangibleAssets')
        self.tangible_assets = attributes[:'tangibleAssets']
      end

      if attributes.has_key?(:'investmentsAndOtherAssets')
        self.investments_and_other_assets = attributes[:'investmentsAndOtherAssets']
      end

      if attributes.has_key?(:'fixedAssets')
        self.fixed_assets = attributes[:'fixedAssets']
      end

      if attributes.has_key?(:'stock')
        self.stock = attributes[:'stock']
      end

      if attributes.has_key?(:'tradeDebtors')
        self.trade_debtors = attributes[:'tradeDebtors']
      end

      if attributes.has_key?(:'otherDebtors')
        self.other_debtors = attributes[:'otherDebtors']
      end

      if attributes.has_key?(:'miscellaneousCurrentAssets')
        self.miscellaneous_current_assets = attributes[:'miscellaneousCurrentAssets']
      end

      if attributes.has_key?(:'cash')
        self.cash = attributes[:'cash']
      end

      if attributes.has_key?(:'currentAssets')
        self.current_assets = attributes[:'currentAssets']
      end

      if attributes.has_key?(:'totalAssets')
        self.total_assets = attributes[:'totalAssets']
      end

      if attributes.has_key?(:'bankLoansAndOverdrafts')
        self.bank_loans_and_overdrafts = attributes[:'bankLoansAndOverdrafts']
      end

      if attributes.has_key?(:'tradeCreditors')
        self.trade_creditors = attributes[:'tradeCreditors']
      end

      if attributes.has_key?(:'miscellaneousCurrentLiabilities')
        self.miscellaneous_current_liabilities = attributes[:'miscellaneousCurrentLiabilities']
      end

      if attributes.has_key?(:'otherShortTermFinances')
        self.other_short_term_finances = attributes[:'otherShortTermFinances']
      end

      if attributes.has_key?(:'currentLiabilities')
        self.current_liabilities = attributes[:'currentLiabilities']
      end

      if attributes.has_key?(:'contingentLiabilities')
        self.contingent_liabilities = attributes[:'contingentLiabilities']
      end

      if attributes.has_key?(:'otherLongTermFinances')
        self.other_long_term_finances = attributes[:'otherLongTermFinances']
      end

      if attributes.has_key?(:'totalLongTermLiabilities')
        self.total_long_term_liabilities = attributes[:'totalLongTermLiabilities']
      end

      if attributes.has_key?(:'totalLiabilities')
        self.total_liabilities = attributes[:'totalLiabilities']
      end

      if attributes.has_key?(:'netAssets')
        self.net_assets = attributes[:'netAssets']
      end

      if attributes.has_key?(:'equityPaidUp')
        self.equity_paid_up = attributes[:'equityPaidUp']
      end

      if attributes.has_key?(:'revaluationReserve')
        self.revaluation_reserve = attributes[:'revaluationReserve']
      end

      if attributes.has_key?(:'sundryReserves')
        self.sundry_reserves = attributes[:'sundryReserves']
      end

      if attributes.has_key?(:'profitAndLossAccountReserve')
        self.profit_and_loss_account_reserve = attributes[:'profitAndLossAccountReserve']
      end

      if attributes.has_key?(:'shareholderFunds')
        self.shareholder_funds = attributes[:'shareholderFunds']
      end

      if attributes.has_key?(:'depreciation')
        self.depreciation = attributes[:'depreciation']
      end

      if attributes.has_key?(:'amortisationOfIntangibles')
        self.amortisation_of_intangibles = attributes[:'amortisationOfIntangibles']
      end

      if attributes.has_key?(:'ebitda')
        self.ebitda = attributes[:'ebitda']
      end

      if attributes.has_key?(:'workingCapital')
        self.working_capital = attributes[:'workingCapital']
      end

      if attributes.has_key?(:'capitalEmployed')
        self.capital_employed = attributes[:'capitalEmployed']
      end

      if attributes.has_key?(:'wagesAndSalaries')
        self.wages_and_salaries = attributes[:'wagesAndSalaries']
      end

      if attributes.has_key?(:'directorsEmoluments')
        self.directors_emoluments = attributes[:'directorsEmoluments']
      end

      if attributes.has_key?(:'auditFees')
        self.audit_fees = attributes[:'auditFees']
      end

      if attributes.has_key?(:'bankOverdraftAndLongTermLoans')
        self.bank_overdraft_and_long_term_loans = attributes[:'bankOverdraftAndLongTermLoans']
      end

      if attributes.has_key?(:'netCashFlowFromOperations')
        self.net_cash_flow_from_operations = attributes[:'netCashFlowFromOperations']
      end

      if attributes.has_key?(:'netCashFlowBeforeFinancing')
        self.net_cash_flow_before_financing = attributes[:'netCashFlowBeforeFinancing']
      end

      if attributes.has_key?(:'netCashFlowFromFinancing')
        self.net_cash_flow_from_financing = attributes[:'netCashFlowFromFinancing']
      end

      if attributes.has_key?(:'increaseInCash')
        self.increase_in_cash = attributes[:'increaseInCash']
      end

      if attributes.has_key?(:'debtorDays')
        self.debtor_days = attributes[:'debtorDays']
      end

      if attributes.has_key?(:'exports')
        self.exports = attributes[:'exports']
      end

      if attributes.has_key?(:'grossMarginPercentage')
        self.gross_margin_percentage = attributes[:'grossMarginPercentage']
      end

      if attributes.has_key?(:'operatingProfitMarginPercentage')
        self.operating_profit_margin_percentage = attributes[:'operatingProfitMarginPercentage']
      end

      if attributes.has_key?(:'ebitdaMarginPercentage')
        self.ebitda_margin_percentage = attributes[:'ebitdaMarginPercentage']
      end

      if attributes.has_key?(:'preTaxProfitMarginPercentage')
        self.pre_tax_profit_margin_percentage = attributes[:'preTaxProfitMarginPercentage']
      end

      if attributes.has_key?(:'netMarginPercentage')
        self.net_margin_percentage = attributes[:'netMarginPercentage']
      end

      if attributes.has_key?(:'returnOnAssetsPercentage')
        self.return_on_assets_percentage = attributes[:'returnOnAssetsPercentage']
      end

      if attributes.has_key?(:'returnOnCapitalEmployedPercentage')
        self.return_on_capital_employed_percentage = attributes[:'returnOnCapitalEmployedPercentage']
      end

      if attributes.has_key?(:'returnOnEquity')
        self.return_on_equity = attributes[:'returnOnEquity']
      end

      if attributes.has_key?(:'currentRatio')
        self.current_ratio = attributes[:'currentRatio']
      end

      if attributes.has_key?(:'cashToCurrentLiabilitiesRatio')
        self.cash_to_current_liabilities_ratio = attributes[:'cashToCurrentLiabilitiesRatio']
      end

      if attributes.has_key?(:'cashToTotalAssetsPercentage')
        self.cash_to_total_assets_percentage = attributes[:'cashToTotalAssetsPercentage']
      end

      if attributes.has_key?(:'liquidityRatio')
        self.liquidity_ratio = attributes[:'liquidityRatio']
      end

      if attributes.has_key?(:'gearingPercentageOnLiabilityBasis')
        self.gearing_percentage_on_liability_basis = attributes[:'gearingPercentageOnLiabilityBasis']
      end

      if attributes.has_key?(:'gearingPercentageOnGrossDebtBasis')
        self.gearing_percentage_on_gross_debt_basis = attributes[:'gearingPercentageOnGrossDebtBasis']
      end

      if attributes.has_key?(:'gearingPercentageOnNetDebtBasis')
        self.gearing_percentage_on_net_debt_basis = attributes[:'gearingPercentageOnNetDebtBasis']
      end

      if attributes.has_key?(:'debtToCapitalPercentage')
        self.debt_to_capital_percentage = attributes[:'debtToCapitalPercentage']
      end

      if attributes.has_key?(:'inventoryTurnoverRatio')
        self.inventory_turnover_ratio = attributes[:'inventoryTurnoverRatio']
      end

      if attributes.has_key?(:'cashToTurnoverRatio')
        self.cash_to_turnover_ratio = attributes[:'cashToTurnoverRatio']
      end

      if attributes.has_key?(:'cashToTurnoverPercentage')
        self.cash_to_turnover_percentage = attributes[:'cashToTurnoverPercentage']
      end

      if attributes.has_key?(:'daysInventoryOutstanding')
        self.days_inventory_outstanding = attributes[:'daysInventoryOutstanding']
      end

      if attributes.has_key?(:'daysSalesOutstanding')
        self.days_sales_outstanding = attributes[:'daysSalesOutstanding']
      end

      if attributes.has_key?(:'daysPayableOutstanding')
        self.days_payable_outstanding = attributes[:'daysPayableOutstanding']
      end

      if attributes.has_key?(:'cashConversionCycle')
        self.cash_conversion_cycle = attributes[:'cashConversionCycle']
      end

      if attributes.has_key?(:'revenuePerEmployee')
        self.revenue_per_employee = attributes[:'revenuePerEmployee']
      end

      if attributes.has_key?(:'humanCapitalValueAdded')
        self.human_capital_value_added = attributes[:'humanCapitalValueAdded']
      end

      if attributes.has_key?(:'interestCoverageRatio')
        self.interest_coverage_ratio = attributes[:'interestCoverageRatio']
      end

      if attributes.has_key?(:'netDebtToEBITDARatio')
        self.net_debt_to_ebitda_ratio = attributes[:'netDebtToEBITDARatio']
      end

      if attributes.has_key?(:'cfoToSalesRatio')
        self.cfo_to_sales_ratio = attributes[:'cfoToSalesRatio']
      end

      if attributes.has_key?(:'auditor')
        self.auditor = attributes[:'auditor']
      end

      if attributes.has_key?(:'jointAuditor')
        self.joint_auditor = attributes[:'jointAuditor']
      end

      if attributes.has_key?(:'solicitor')
        self.solicitor = attributes[:'solicitor']
      end

      if attributes.has_key?(:'accountant')
        self.accountant = attributes[:'accountant']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @accounts_date.nil?
        invalid_properties.push("invalid value for 'accounts_date', accounts_date cannot be nil.")
      end

      if @reporting_period.nil?
        invalid_properties.push("invalid value for 'reporting_period', reporting_period cannot be nil.")
      end

      if @currency.nil?
        invalid_properties.push("invalid value for 'currency', currency cannot be nil.")
      end

      if @consolidated_accounts.nil?
        invalid_properties.push("invalid value for 'consolidated_accounts', consolidated_accounts cannot be nil.")
      end

      if @audit_qualification.nil?
        invalid_properties.push("invalid value for 'audit_qualification', audit_qualification cannot be nil.")
      end

      if @number_of_employees.nil?
        invalid_properties.push("invalid value for 'number_of_employees', number_of_employees cannot be nil.")
      end

      if @turnover.nil?
        invalid_properties.push("invalid value for 'turnover', turnover cannot be nil.")
      end

      if @cost_of_sales.nil?
        invalid_properties.push("invalid value for 'cost_of_sales', cost_of_sales cannot be nil.")
      end

      if @sga_plus_other_net_costs.nil?
        invalid_properties.push("invalid value for 'sga_plus_other_net_costs', sga_plus_other_net_costs cannot be nil.")
      end

      if @operating_profit.nil?
        invalid_properties.push("invalid value for 'operating_profit', operating_profit cannot be nil.")
      end

      if @interest_receivable.nil?
        invalid_properties.push("invalid value for 'interest_receivable', interest_receivable cannot be nil.")
      end

      if @interest_payable.nil?
        invalid_properties.push("invalid value for 'interest_payable', interest_payable cannot be nil.")
      end

      if @pre_tax_profit.nil?
        invalid_properties.push("invalid value for 'pre_tax_profit', pre_tax_profit cannot be nil.")
      end

      if @taxation.nil?
        invalid_properties.push("invalid value for 'taxation', taxation cannot be nil.")
      end

      if @post_tax_profit.nil?
        invalid_properties.push("invalid value for 'post_tax_profit', post_tax_profit cannot be nil.")
      end

      if @dividends_payable.nil?
        invalid_properties.push("invalid value for 'dividends_payable', dividends_payable cannot be nil.")
      end

      if @retained_profits.nil?
        invalid_properties.push("invalid value for 'retained_profits', retained_profits cannot be nil.")
      end

      if @intangible_assets.nil?
        invalid_properties.push("invalid value for 'intangible_assets', intangible_assets cannot be nil.")
      end

      if @tangible_assets.nil?
        invalid_properties.push("invalid value for 'tangible_assets', tangible_assets cannot be nil.")
      end

      if @investments_and_other_assets.nil?
        invalid_properties.push("invalid value for 'investments_and_other_assets', investments_and_other_assets cannot be nil.")
      end

      if @fixed_assets.nil?
        invalid_properties.push("invalid value for 'fixed_assets', fixed_assets cannot be nil.")
      end

      if @stock.nil?
        invalid_properties.push("invalid value for 'stock', stock cannot be nil.")
      end

      if @trade_debtors.nil?
        invalid_properties.push("invalid value for 'trade_debtors', trade_debtors cannot be nil.")
      end

      if @other_debtors.nil?
        invalid_properties.push("invalid value for 'other_debtors', other_debtors cannot be nil.")
      end

      if @miscellaneous_current_assets.nil?
        invalid_properties.push("invalid value for 'miscellaneous_current_assets', miscellaneous_current_assets cannot be nil.")
      end

      if @cash.nil?
        invalid_properties.push("invalid value for 'cash', cash cannot be nil.")
      end

      if @current_assets.nil?
        invalid_properties.push("invalid value for 'current_assets', current_assets cannot be nil.")
      end

      if @total_assets.nil?
        invalid_properties.push("invalid value for 'total_assets', total_assets cannot be nil.")
      end

      if @bank_loans_and_overdrafts.nil?
        invalid_properties.push("invalid value for 'bank_loans_and_overdrafts', bank_loans_and_overdrafts cannot be nil.")
      end

      if @trade_creditors.nil?
        invalid_properties.push("invalid value for 'trade_creditors', trade_creditors cannot be nil.")
      end

      if @miscellaneous_current_liabilities.nil?
        invalid_properties.push("invalid value for 'miscellaneous_current_liabilities', miscellaneous_current_liabilities cannot be nil.")
      end

      if @other_short_term_finances.nil?
        invalid_properties.push("invalid value for 'other_short_term_finances', other_short_term_finances cannot be nil.")
      end

      if @current_liabilities.nil?
        invalid_properties.push("invalid value for 'current_liabilities', current_liabilities cannot be nil.")
      end

      if @contingent_liabilities.nil?
        invalid_properties.push("invalid value for 'contingent_liabilities', contingent_liabilities cannot be nil.")
      end

      if @other_long_term_finances.nil?
        invalid_properties.push("invalid value for 'other_long_term_finances', other_long_term_finances cannot be nil.")
      end

      if @total_long_term_liabilities.nil?
        invalid_properties.push("invalid value for 'total_long_term_liabilities', total_long_term_liabilities cannot be nil.")
      end

      if @total_liabilities.nil?
        invalid_properties.push("invalid value for 'total_liabilities', total_liabilities cannot be nil.")
      end

      if @net_assets.nil?
        invalid_properties.push("invalid value for 'net_assets', net_assets cannot be nil.")
      end

      if @equity_paid_up.nil?
        invalid_properties.push("invalid value for 'equity_paid_up', equity_paid_up cannot be nil.")
      end

      if @revaluation_reserve.nil?
        invalid_properties.push("invalid value for 'revaluation_reserve', revaluation_reserve cannot be nil.")
      end

      if @sundry_reserves.nil?
        invalid_properties.push("invalid value for 'sundry_reserves', sundry_reserves cannot be nil.")
      end

      if @profit_and_loss_account_reserve.nil?
        invalid_properties.push("invalid value for 'profit_and_loss_account_reserve', profit_and_loss_account_reserve cannot be nil.")
      end

      if @shareholder_funds.nil?
        invalid_properties.push("invalid value for 'shareholder_funds', shareholder_funds cannot be nil.")
      end

      if @depreciation.nil?
        invalid_properties.push("invalid value for 'depreciation', depreciation cannot be nil.")
      end

      if @amortisation_of_intangibles.nil?
        invalid_properties.push("invalid value for 'amortisation_of_intangibles', amortisation_of_intangibles cannot be nil.")
      end

      if @ebitda.nil?
        invalid_properties.push("invalid value for 'ebitda', ebitda cannot be nil.")
      end

      if @working_capital.nil?
        invalid_properties.push("invalid value for 'working_capital', working_capital cannot be nil.")
      end

      if @capital_employed.nil?
        invalid_properties.push("invalid value for 'capital_employed', capital_employed cannot be nil.")
      end

      if @wages_and_salaries.nil?
        invalid_properties.push("invalid value for 'wages_and_salaries', wages_and_salaries cannot be nil.")
      end

      if @directors_emoluments.nil?
        invalid_properties.push("invalid value for 'directors_emoluments', directors_emoluments cannot be nil.")
      end

      if @audit_fees.nil?
        invalid_properties.push("invalid value for 'audit_fees', audit_fees cannot be nil.")
      end

      if @bank_overdraft_and_long_term_loans.nil?
        invalid_properties.push("invalid value for 'bank_overdraft_and_long_term_loans', bank_overdraft_and_long_term_loans cannot be nil.")
      end

      if @net_cash_flow_from_operations.nil?
        invalid_properties.push("invalid value for 'net_cash_flow_from_operations', net_cash_flow_from_operations cannot be nil.")
      end

      if @net_cash_flow_before_financing.nil?
        invalid_properties.push("invalid value for 'net_cash_flow_before_financing', net_cash_flow_before_financing cannot be nil.")
      end

      if @net_cash_flow_from_financing.nil?
        invalid_properties.push("invalid value for 'net_cash_flow_from_financing', net_cash_flow_from_financing cannot be nil.")
      end

      if @increase_in_cash.nil?
        invalid_properties.push("invalid value for 'increase_in_cash', increase_in_cash cannot be nil.")
      end

      if @debtor_days.nil?
        invalid_properties.push("invalid value for 'debtor_days', debtor_days cannot be nil.")
      end

      if @exports.nil?
        invalid_properties.push("invalid value for 'exports', exports cannot be nil.")
      end

      if @gross_margin_percentage.nil?
        invalid_properties.push("invalid value for 'gross_margin_percentage', gross_margin_percentage cannot be nil.")
      end

      if @operating_profit_margin_percentage.nil?
        invalid_properties.push("invalid value for 'operating_profit_margin_percentage', operating_profit_margin_percentage cannot be nil.")
      end

      if @ebitda_margin_percentage.nil?
        invalid_properties.push("invalid value for 'ebitda_margin_percentage', ebitda_margin_percentage cannot be nil.")
      end

      if @pre_tax_profit_margin_percentage.nil?
        invalid_properties.push("invalid value for 'pre_tax_profit_margin_percentage', pre_tax_profit_margin_percentage cannot be nil.")
      end

      if @net_margin_percentage.nil?
        invalid_properties.push("invalid value for 'net_margin_percentage', net_margin_percentage cannot be nil.")
      end

      if @return_on_assets_percentage.nil?
        invalid_properties.push("invalid value for 'return_on_assets_percentage', return_on_assets_percentage cannot be nil.")
      end

      if @return_on_capital_employed_percentage.nil?
        invalid_properties.push("invalid value for 'return_on_capital_employed_percentage', return_on_capital_employed_percentage cannot be nil.")
      end

      if @return_on_equity.nil?
        invalid_properties.push("invalid value for 'return_on_equity', return_on_equity cannot be nil.")
      end

      if @current_ratio.nil?
        invalid_properties.push("invalid value for 'current_ratio', current_ratio cannot be nil.")
      end

      if @cash_to_current_liabilities_ratio.nil?
        invalid_properties.push("invalid value for 'cash_to_current_liabilities_ratio', cash_to_current_liabilities_ratio cannot be nil.")
      end

      if @cash_to_total_assets_percentage.nil?
        invalid_properties.push("invalid value for 'cash_to_total_assets_percentage', cash_to_total_assets_percentage cannot be nil.")
      end

      if @liquidity_ratio.nil?
        invalid_properties.push("invalid value for 'liquidity_ratio', liquidity_ratio cannot be nil.")
      end

      if @gearing_percentage_on_liability_basis.nil?
        invalid_properties.push("invalid value for 'gearing_percentage_on_liability_basis', gearing_percentage_on_liability_basis cannot be nil.")
      end

      if @gearing_percentage_on_gross_debt_basis.nil?
        invalid_properties.push("invalid value for 'gearing_percentage_on_gross_debt_basis', gearing_percentage_on_gross_debt_basis cannot be nil.")
      end

      if @gearing_percentage_on_net_debt_basis.nil?
        invalid_properties.push("invalid value for 'gearing_percentage_on_net_debt_basis', gearing_percentage_on_net_debt_basis cannot be nil.")
      end

      if @debt_to_capital_percentage.nil?
        invalid_properties.push("invalid value for 'debt_to_capital_percentage', debt_to_capital_percentage cannot be nil.")
      end

      if @inventory_turnover_ratio.nil?
        invalid_properties.push("invalid value for 'inventory_turnover_ratio', inventory_turnover_ratio cannot be nil.")
      end

      if @cash_to_turnover_percentage.nil?
        invalid_properties.push("invalid value for 'cash_to_turnover_percentage', cash_to_turnover_percentage cannot be nil.")
      end

      if @days_inventory_outstanding.nil?
        invalid_properties.push("invalid value for 'days_inventory_outstanding', days_inventory_outstanding cannot be nil.")
      end

      if @days_sales_outstanding.nil?
        invalid_properties.push("invalid value for 'days_sales_outstanding', days_sales_outstanding cannot be nil.")
      end

      if @days_payable_outstanding.nil?
        invalid_properties.push("invalid value for 'days_payable_outstanding', days_payable_outstanding cannot be nil.")
      end

      if @cash_conversion_cycle.nil?
        invalid_properties.push("invalid value for 'cash_conversion_cycle', cash_conversion_cycle cannot be nil.")
      end

      if @revenue_per_employee.nil?
        invalid_properties.push("invalid value for 'revenue_per_employee', revenue_per_employee cannot be nil.")
      end

      if @human_capital_value_added.nil?
        invalid_properties.push("invalid value for 'human_capital_value_added', human_capital_value_added cannot be nil.")
      end

      if @interest_coverage_ratio.nil?
        invalid_properties.push("invalid value for 'interest_coverage_ratio', interest_coverage_ratio cannot be nil.")
      end

      if @net_debt_to_ebitda_ratio.nil?
        invalid_properties.push("invalid value for 'net_debt_to_ebitda_ratio', net_debt_to_ebitda_ratio cannot be nil.")
      end

      if @cfo_to_sales_ratio.nil?
        invalid_properties.push("invalid value for 'cfo_to_sales_ratio', cfo_to_sales_ratio cannot be nil.")
      end

      if @auditor.nil?
        invalid_properties.push("invalid value for 'auditor', auditor cannot be nil.")
      end

      if @joint_auditor.nil?
        invalid_properties.push("invalid value for 'joint_auditor', joint_auditor cannot be nil.")
      end

      if @solicitor.nil?
        invalid_properties.push("invalid value for 'solicitor', solicitor cannot be nil.")
      end

      if @accountant.nil?
        invalid_properties.push("invalid value for 'accountant', accountant cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @accounts_date.nil?
      return false if @reporting_period.nil?
      return false if @currency.nil?
      return false if @consolidated_accounts.nil?
      return false if @audit_qualification.nil?
      return false if @number_of_employees.nil?
      return false if @turnover.nil?
      return false if @cost_of_sales.nil?
      return false if @sga_plus_other_net_costs.nil?
      return false if @operating_profit.nil?
      return false if @interest_receivable.nil?
      return false if @interest_payable.nil?
      return false if @pre_tax_profit.nil?
      return false if @taxation.nil?
      return false if @post_tax_profit.nil?
      return false if @dividends_payable.nil?
      return false if @retained_profits.nil?
      return false if @intangible_assets.nil?
      return false if @tangible_assets.nil?
      return false if @investments_and_other_assets.nil?
      return false if @fixed_assets.nil?
      return false if @stock.nil?
      return false if @trade_debtors.nil?
      return false if @other_debtors.nil?
      return false if @miscellaneous_current_assets.nil?
      return false if @cash.nil?
      return false if @current_assets.nil?
      return false if @total_assets.nil?
      return false if @bank_loans_and_overdrafts.nil?
      return false if @trade_creditors.nil?
      return false if @miscellaneous_current_liabilities.nil?
      return false if @other_short_term_finances.nil?
      return false if @current_liabilities.nil?
      return false if @contingent_liabilities.nil?
      return false if @other_long_term_finances.nil?
      return false if @total_long_term_liabilities.nil?
      return false if @total_liabilities.nil?
      return false if @net_assets.nil?
      return false if @equity_paid_up.nil?
      return false if @revaluation_reserve.nil?
      return false if @sundry_reserves.nil?
      return false if @profit_and_loss_account_reserve.nil?
      return false if @shareholder_funds.nil?
      return false if @depreciation.nil?
      return false if @amortisation_of_intangibles.nil?
      return false if @ebitda.nil?
      return false if @working_capital.nil?
      return false if @capital_employed.nil?
      return false if @wages_and_salaries.nil?
      return false if @directors_emoluments.nil?
      return false if @audit_fees.nil?
      return false if @bank_overdraft_and_long_term_loans.nil?
      return false if @net_cash_flow_from_operations.nil?
      return false if @net_cash_flow_before_financing.nil?
      return false if @net_cash_flow_from_financing.nil?
      return false if @increase_in_cash.nil?
      return false if @debtor_days.nil?
      return false if @exports.nil?
      return false if @gross_margin_percentage.nil?
      return false if @operating_profit_margin_percentage.nil?
      return false if @ebitda_margin_percentage.nil?
      return false if @pre_tax_profit_margin_percentage.nil?
      return false if @net_margin_percentage.nil?
      return false if @return_on_assets_percentage.nil?
      return false if @return_on_capital_employed_percentage.nil?
      return false if @return_on_equity.nil?
      return false if @current_ratio.nil?
      return false if @cash_to_current_liabilities_ratio.nil?
      return false if @cash_to_total_assets_percentage.nil?
      return false if @liquidity_ratio.nil?
      return false if @gearing_percentage_on_liability_basis.nil?
      return false if @gearing_percentage_on_gross_debt_basis.nil?
      return false if @gearing_percentage_on_net_debt_basis.nil?
      return false if @debt_to_capital_percentage.nil?
      return false if @inventory_turnover_ratio.nil?
      return false if @cash_to_turnover_percentage.nil?
      return false if @days_inventory_outstanding.nil?
      return false if @days_sales_outstanding.nil?
      return false if @days_payable_outstanding.nil?
      return false if @cash_conversion_cycle.nil?
      return false if @revenue_per_employee.nil?
      return false if @human_capital_value_added.nil?
      return false if @interest_coverage_ratio.nil?
      return false if @net_debt_to_ebitda_ratio.nil?
      return false if @cfo_to_sales_ratio.nil?
      return false if @auditor.nil?
      return false if @joint_auditor.nil?
      return false if @solicitor.nil?
      return false if @accountant.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          accounts_date == o.accounts_date &&
          reporting_period == o.reporting_period &&
          currency == o.currency &&
          consolidated_accounts == o.consolidated_accounts &&
          audit_qualification == o.audit_qualification &&
          number_of_employees == o.number_of_employees &&
          turnover == o.turnover &&
          cost_of_sales == o.cost_of_sales &&
          sga_plus_other_net_costs == o.sga_plus_other_net_costs &&
          operating_profit == o.operating_profit &&
          interest_receivable == o.interest_receivable &&
          interest_payable == o.interest_payable &&
          pre_tax_profit == o.pre_tax_profit &&
          taxation == o.taxation &&
          post_tax_profit == o.post_tax_profit &&
          dividends_payable == o.dividends_payable &&
          retained_profits == o.retained_profits &&
          intangible_assets == o.intangible_assets &&
          tangible_assets == o.tangible_assets &&
          investments_and_other_assets == o.investments_and_other_assets &&
          fixed_assets == o.fixed_assets &&
          stock == o.stock &&
          trade_debtors == o.trade_debtors &&
          other_debtors == o.other_debtors &&
          miscellaneous_current_assets == o.miscellaneous_current_assets &&
          cash == o.cash &&
          current_assets == o.current_assets &&
          total_assets == o.total_assets &&
          bank_loans_and_overdrafts == o.bank_loans_and_overdrafts &&
          trade_creditors == o.trade_creditors &&
          miscellaneous_current_liabilities == o.miscellaneous_current_liabilities &&
          other_short_term_finances == o.other_short_term_finances &&
          current_liabilities == o.current_liabilities &&
          contingent_liabilities == o.contingent_liabilities &&
          other_long_term_finances == o.other_long_term_finances &&
          total_long_term_liabilities == o.total_long_term_liabilities &&
          total_liabilities == o.total_liabilities &&
          net_assets == o.net_assets &&
          equity_paid_up == o.equity_paid_up &&
          revaluation_reserve == o.revaluation_reserve &&
          sundry_reserves == o.sundry_reserves &&
          profit_and_loss_account_reserve == o.profit_and_loss_account_reserve &&
          shareholder_funds == o.shareholder_funds &&
          depreciation == o.depreciation &&
          amortisation_of_intangibles == o.amortisation_of_intangibles &&
          ebitda == o.ebitda &&
          working_capital == o.working_capital &&
          capital_employed == o.capital_employed &&
          wages_and_salaries == o.wages_and_salaries &&
          directors_emoluments == o.directors_emoluments &&
          audit_fees == o.audit_fees &&
          bank_overdraft_and_long_term_loans == o.bank_overdraft_and_long_term_loans &&
          net_cash_flow_from_operations == o.net_cash_flow_from_operations &&
          net_cash_flow_before_financing == o.net_cash_flow_before_financing &&
          net_cash_flow_from_financing == o.net_cash_flow_from_financing &&
          increase_in_cash == o.increase_in_cash &&
          debtor_days == o.debtor_days &&
          exports == o.exports &&
          gross_margin_percentage == o.gross_margin_percentage &&
          operating_profit_margin_percentage == o.operating_profit_margin_percentage &&
          ebitda_margin_percentage == o.ebitda_margin_percentage &&
          pre_tax_profit_margin_percentage == o.pre_tax_profit_margin_percentage &&
          net_margin_percentage == o.net_margin_percentage &&
          return_on_assets_percentage == o.return_on_assets_percentage &&
          return_on_capital_employed_percentage == o.return_on_capital_employed_percentage &&
          return_on_equity == o.return_on_equity &&
          current_ratio == o.current_ratio &&
          cash_to_current_liabilities_ratio == o.cash_to_current_liabilities_ratio &&
          cash_to_total_assets_percentage == o.cash_to_total_assets_percentage &&
          liquidity_ratio == o.liquidity_ratio &&
          gearing_percentage_on_liability_basis == o.gearing_percentage_on_liability_basis &&
          gearing_percentage_on_gross_debt_basis == o.gearing_percentage_on_gross_debt_basis &&
          gearing_percentage_on_net_debt_basis == o.gearing_percentage_on_net_debt_basis &&
          debt_to_capital_percentage == o.debt_to_capital_percentage &&
          inventory_turnover_ratio == o.inventory_turnover_ratio &&
          cash_to_turnover_ratio == o.cash_to_turnover_ratio &&
          cash_to_turnover_percentage == o.cash_to_turnover_percentage &&
          days_inventory_outstanding == o.days_inventory_outstanding &&
          days_sales_outstanding == o.days_sales_outstanding &&
          days_payable_outstanding == o.days_payable_outstanding &&
          cash_conversion_cycle == o.cash_conversion_cycle &&
          revenue_per_employee == o.revenue_per_employee &&
          human_capital_value_added == o.human_capital_value_added &&
          interest_coverage_ratio == o.interest_coverage_ratio &&
          net_debt_to_ebitda_ratio == o.net_debt_to_ebitda_ratio &&
          cfo_to_sales_ratio == o.cfo_to_sales_ratio &&
          auditor == o.auditor &&
          joint_auditor == o.joint_auditor &&
          solicitor == o.solicitor &&
          accountant == o.accountant
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [accounts_date, reporting_period, currency, consolidated_accounts, audit_qualification, number_of_employees, turnover, cost_of_sales, sga_plus_other_net_costs, operating_profit, interest_receivable, interest_payable, pre_tax_profit, taxation, post_tax_profit, dividends_payable, retained_profits, intangible_assets, tangible_assets, investments_and_other_assets, fixed_assets, stock, trade_debtors, other_debtors, miscellaneous_current_assets, cash, current_assets, total_assets, bank_loans_and_overdrafts, trade_creditors, miscellaneous_current_liabilities, other_short_term_finances, current_liabilities, contingent_liabilities, other_long_term_finances, total_long_term_liabilities, total_liabilities, net_assets, equity_paid_up, revaluation_reserve, sundry_reserves, profit_and_loss_account_reserve, shareholder_funds, depreciation, amortisation_of_intangibles, ebitda, working_capital, capital_employed, wages_and_salaries, directors_emoluments, audit_fees, bank_overdraft_and_long_term_loans, net_cash_flow_from_operations, net_cash_flow_before_financing, net_cash_flow_from_financing, increase_in_cash, debtor_days, exports, gross_margin_percentage, operating_profit_margin_percentage, ebitda_margin_percentage, pre_tax_profit_margin_percentage, net_margin_percentage, return_on_assets_percentage, return_on_capital_employed_percentage, return_on_equity, current_ratio, cash_to_current_liabilities_ratio, cash_to_total_assets_percentage, liquidity_ratio, gearing_percentage_on_liability_basis, gearing_percentage_on_gross_debt_basis, gearing_percentage_on_net_debt_basis, debt_to_capital_percentage, inventory_turnover_ratio, cash_to_turnover_ratio, cash_to_turnover_percentage, days_inventory_outstanding, days_sales_outstanding, days_payable_outstanding, cash_conversion_cycle, revenue_per_employee, human_capital_value_added, interest_coverage_ratio, net_debt_to_ebitda_ratio, cfo_to_sales_ratio, auditor, joint_auditor, solicitor, accountant].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
