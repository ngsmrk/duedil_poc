=begin
#DueDil API v4

#Welcome to the DueDil API v4, which provides programmatic access to DueDil's comprehensive company data. It can be used to enhance a wide variety of business functions, from auto-populating website forms to verifying customer credentials.  ### Getting started In order to make requests, you'll need to obtain an API key. Please visit https://www.duedil.com/api for more information. Once you have an API key, requests can be made using a UI such as [Postman](https://www.getpostman.com/) or via a terminal using [curl](https://curl.haxx.se/docs/manual.html). An example curl request should look as follows:  ``` curl -X GET --header 'Accept: application/json' --header 'X-AUTH-TOKEN: api_key' 'https://duedil.io/v4/company/gb/06999618.json' ```  ### Generating clients  This API has been authored using the [OpenAPI](https://en.wikipedia.org/wiki/OpenAPI_Specification) (Swagger) specification. Being machine readable, it can be used to generate V4 API clients in a range of languages. To create a client:   * Open the [Swagger Editor](http://editor.swagger.io/).  * Select 'File', 'Import URL' then enter https://duedil.io/v4/swagger.json  * Select 'Generate Client' then choose from over 30 languages such as PHP, Python and Java.  ### International data  DueDil provides a wide range of data spanning across multiple geographic regions. Our international package currently includes company information from the following countries:  | Country              |    | Country       |    | |----------------------|----|---------------|----| | Albania              | AL | Jersey        | JE | | Bahamas              | BS | Latvia        | LV | | Belgium              | BE | Liechtenstein | LI | | Bermuda              | BM | Luxembourg    | LU | | Hong Kong, SAR China | HK | Malta         | MT | | Cyprus               | CY | Montenegro    | ME | | Denmark              | DK | Netherlands   | NL | | Finland              | FI | Norway        | NO | | France               | FR | Poland        | PL | | Germany              | DE | Romania       | RO | | Greenland            | GL | Slovakia      | SK | | Guernsey             | GG | Slovenia      | SI | | Iceland              | IS | Sweden        | SE | | Isle of Man          | IM | Switzerland   | CH | | Israel               | IL |               |    |  Retrieving international data is simple. Construct your request with the corresponding country code. For the German company [Daimler AG](https://www.duedil.com/company/de/Stuttgart%20HRB%2019360/daimler-ag) you should construct your request URI as follows:  ``` curl -X GET --header 'Accept: application/json' --header 'X-AUTH-TOKEN: api_key' 'https://duedil.io/v4/company/de/Stuttgart%20HRB%2019360.json' ```  For Companies search, the country code should be included in the post body:  ``` {     \"criteria\": {         \"name\": \"Daimler AG\",         \"countryCodes\": {             \"values\": [\"DE\", \"FR\"]         }     } } ```  **Note:** You will need to have international access added to your plan to search for and retrieve information for companies outside of the United Kingdom (GB) and Ireland (IE).  #### Data coverage  While 100% coverage is our goal, this is not feasible for every international country at present. If we cannot find the entity you are requesting, the API will return HTTP 404 with message “Resource not found”. Partial responses can include null fields where specific data is unavailable.  ### Pagination  All endpoints that return collections can be paginated in the same way through two optional parameters (`limit` and `offset`). The `offset` parameter determines the 0-based index of the first element of the collection to be returned, which defaults to 0. The `limit` parameter sets the maximum number of items from the collection to be returned, which defaults to 10. The maximum allowed limit parameter is 50.  **Note:** API keys issued for evaluation purposes will have limited access to the first 10 search results only. Other non-search endpoints do not apply this constraint.   Every response from a paginated endpoint contains a top-level property called `pagination`, which in turn contains the `offset` and `limit` values used in the API call, as well as the `total` number of items in the collection. For instance:   ``` \"pagination\": {   \"offset\": 0,   \"limit\": 10,   \"total\": 12 } ```   In the example above, an API call with `offset` = 10 and `limit` = 10 would return the 11th and 12th items in the collection, whereas an API call with `offset` = 20 and `limit` = 10 would return a successful response (200 HTTP code) with an empty collection. Calls with invalid `offset`/`limit` parameters, such as negative values, return an error (400 HTTP code). 

OpenAPI spec version: 4.4.19

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module SwaggerClient

  class CompanyCheckResultsMatchedCompany
    attr_accessor :country_code

    attr_accessor :company_id

    attr_accessor :name

    attr_accessor :type

    attr_accessor :incorporation_country

    attr_accessor :incorporation_date

    attr_accessor :official_status

    attr_accessor :simplified_status

    attr_accessor :number_of_employees

    attr_accessor :primary_website

    attr_accessor :registered_address

    attr_accessor :industries

    attr_accessor :accounts

    attr_accessor :financial_summary

    attr_accessor :annual_returns

    attr_accessor :officers

    attr_accessor :officer_disqualifications

    attr_accessor :total_company_shares

    attr_accessor :number_of_shareholders

    attr_accessor :shareholders_greater_or_equal_ten_percent

    attr_accessor :immediate_parents

    attr_accessor :ultimate_parents

    attr_accessor :persons_of_significant_control

    attr_accessor :psc_statements

    attr_accessor :portfolio_companies_count

    attr_accessor :related_companies_count

    attr_accessor :charges_count

    attr_accessor :bank_accounts_count

    attr_accessor :gazette_notices_count

    attr_accessor :is_fca_authorised

    attr_accessor :document_filing_counts

    attr_accessor :peps_sanctions_check


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'country_code' => :'countryCode',
        :'company_id' => :'companyId',
        :'name' => :'name',
        :'type' => :'type',
        :'incorporation_country' => :'incorporationCountry',
        :'incorporation_date' => :'incorporationDate',
        :'official_status' => :'officialStatus',
        :'simplified_status' => :'simplifiedStatus',
        :'number_of_employees' => :'numberOfEmployees',
        :'primary_website' => :'primaryWebsite',
        :'registered_address' => :'registeredAddress',
        :'industries' => :'industries',
        :'accounts' => :'accounts',
        :'financial_summary' => :'financialSummary',
        :'annual_returns' => :'annualReturns',
        :'officers' => :'officers',
        :'officer_disqualifications' => :'officerDisqualifications',
        :'total_company_shares' => :'totalCompanyShares',
        :'number_of_shareholders' => :'numberOfShareholders',
        :'shareholders_greater_or_equal_ten_percent' => :'shareholdersGreaterOrEqualTenPercent',
        :'immediate_parents' => :'immediateParents',
        :'ultimate_parents' => :'ultimateParents',
        :'persons_of_significant_control' => :'personsOfSignificantControl',
        :'psc_statements' => :'pscStatements',
        :'portfolio_companies_count' => :'portfolioCompaniesCount',
        :'related_companies_count' => :'relatedCompaniesCount',
        :'charges_count' => :'chargesCount',
        :'bank_accounts_count' => :'bankAccountsCount',
        :'gazette_notices_count' => :'gazetteNoticesCount',
        :'is_fca_authorised' => :'isFcaAuthorised',
        :'document_filing_counts' => :'documentFilingCounts',
        :'peps_sanctions_check' => :'pepsSanctionsCheck'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'country_code' => :'String',
        :'company_id' => :'String',
        :'name' => :'String',
        :'type' => :'String',
        :'incorporation_country' => :'String',
        :'incorporation_date' => :'String',
        :'official_status' => :'String',
        :'simplified_status' => :'String',
        :'number_of_employees' => :'Integer',
        :'primary_website' => :'String',
        :'registered_address' => :'KeyCompanyInformationRegisteredAddress',
        :'industries' => :'Array<CompanyCheckResultsMatchedCompanyIndustries>',
        :'accounts' => :'CompanyCheckResultsMatchedCompanyAccounts',
        :'financial_summary' => :'Array<CompanyCheckResultsMatchedCompanyFinancialSummary>',
        :'annual_returns' => :'CompanyCheckResultsMatchedCompanyAnnualReturns',
        :'officers' => :'Array<CompanyCheckResultsMatchedCompanyOfficers>',
        :'officer_disqualifications' => :'CompanyCheckResultsMatchedCompanyOfficerDisqualifications',
        :'total_company_shares' => :'Integer',
        :'number_of_shareholders' => :'Integer',
        :'shareholders_greater_or_equal_ten_percent' => :'Array<CompanyCheckResultsMatchedCompanyShareholdersGreaterOrEqualTenPercent>',
        :'immediate_parents' => :'Array<CompanyCheckResultsMatchedCompanyImmediateParents>',
        :'ultimate_parents' => :'Array<CompanyCheckResultsMatchedCompanyUltimateParents>',
        :'persons_of_significant_control' => :'Array<CompanyCheckResultsMatchedCompanyPersonsOfSignificantControl>',
        :'psc_statements' => :'Array<CompanyCheckResultsMatchedCompanyPscStatements>',
        :'portfolio_companies_count' => :'Integer',
        :'related_companies_count' => :'Integer',
        :'charges_count' => :'Integer',
        :'bank_accounts_count' => :'Integer',
        :'gazette_notices_count' => :'Integer',
        :'is_fca_authorised' => :'BOOLEAN',
        :'document_filing_counts' => :'CompanyCheckResultsMatchedCompanyDocumentFilingCounts',
        :'peps_sanctions_check' => :'CompanyCheckResultsMatchedCompanyPepsSanctionsCheck'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'countryCode')
        self.country_code = attributes[:'countryCode']
      end

      if attributes.has_key?(:'companyId')
        self.company_id = attributes[:'companyId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'incorporationCountry')
        self.incorporation_country = attributes[:'incorporationCountry']
      end

      if attributes.has_key?(:'incorporationDate')
        self.incorporation_date = attributes[:'incorporationDate']
      end

      if attributes.has_key?(:'officialStatus')
        self.official_status = attributes[:'officialStatus']
      end

      if attributes.has_key?(:'simplifiedStatus')
        self.simplified_status = attributes[:'simplifiedStatus']
      end

      if attributes.has_key?(:'numberOfEmployees')
        self.number_of_employees = attributes[:'numberOfEmployees']
      end

      if attributes.has_key?(:'primaryWebsite')
        self.primary_website = attributes[:'primaryWebsite']
      end

      if attributes.has_key?(:'registeredAddress')
        self.registered_address = attributes[:'registeredAddress']
      end

      if attributes.has_key?(:'industries')
        if (value = attributes[:'industries']).is_a?(Array)
          self.industries = value
        end
      end

      if attributes.has_key?(:'accounts')
        self.accounts = attributes[:'accounts']
      end

      if attributes.has_key?(:'financialSummary')
        if (value = attributes[:'financialSummary']).is_a?(Array)
          self.financial_summary = value
        end
      end

      if attributes.has_key?(:'annualReturns')
        self.annual_returns = attributes[:'annualReturns']
      end

      if attributes.has_key?(:'officers')
        if (value = attributes[:'officers']).is_a?(Array)
          self.officers = value
        end
      end

      if attributes.has_key?(:'officerDisqualifications')
        self.officer_disqualifications = attributes[:'officerDisqualifications']
      end

      if attributes.has_key?(:'totalCompanyShares')
        self.total_company_shares = attributes[:'totalCompanyShares']
      end

      if attributes.has_key?(:'numberOfShareholders')
        self.number_of_shareholders = attributes[:'numberOfShareholders']
      end

      if attributes.has_key?(:'shareholdersGreaterOrEqualTenPercent')
        if (value = attributes[:'shareholdersGreaterOrEqualTenPercent']).is_a?(Array)
          self.shareholders_greater_or_equal_ten_percent = value
        end
      end

      if attributes.has_key?(:'immediateParents')
        if (value = attributes[:'immediateParents']).is_a?(Array)
          self.immediate_parents = value
        end
      end

      if attributes.has_key?(:'ultimateParents')
        if (value = attributes[:'ultimateParents']).is_a?(Array)
          self.ultimate_parents = value
        end
      end

      if attributes.has_key?(:'personsOfSignificantControl')
        if (value = attributes[:'personsOfSignificantControl']).is_a?(Array)
          self.persons_of_significant_control = value
        end
      end

      if attributes.has_key?(:'pscStatements')
        if (value = attributes[:'pscStatements']).is_a?(Array)
          self.psc_statements = value
        end
      end

      if attributes.has_key?(:'portfolioCompaniesCount')
        self.portfolio_companies_count = attributes[:'portfolioCompaniesCount']
      end

      if attributes.has_key?(:'relatedCompaniesCount')
        self.related_companies_count = attributes[:'relatedCompaniesCount']
      end

      if attributes.has_key?(:'chargesCount')
        self.charges_count = attributes[:'chargesCount']
      end

      if attributes.has_key?(:'bankAccountsCount')
        self.bank_accounts_count = attributes[:'bankAccountsCount']
      end

      if attributes.has_key?(:'gazetteNoticesCount')
        self.gazette_notices_count = attributes[:'gazetteNoticesCount']
      end

      if attributes.has_key?(:'isFcaAuthorised')
        self.is_fca_authorised = attributes[:'isFcaAuthorised']
      end

      if attributes.has_key?(:'documentFilingCounts')
        self.document_filing_counts = attributes[:'documentFilingCounts']
      end

      if attributes.has_key?(:'pepsSanctionsCheck')
        self.peps_sanctions_check = attributes[:'pepsSanctionsCheck']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @country_code.nil?
        invalid_properties.push("invalid value for 'country_code', country_code cannot be nil.")
      end

      if @company_id.nil?
        invalid_properties.push("invalid value for 'company_id', company_id cannot be nil.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @type.nil?
        invalid_properties.push("invalid value for 'type', type cannot be nil.")
      end

      if @incorporation_country.nil?
        invalid_properties.push("invalid value for 'incorporation_country', incorporation_country cannot be nil.")
      end

      if @incorporation_date.nil?
        invalid_properties.push("invalid value for 'incorporation_date', incorporation_date cannot be nil.")
      end

      if @official_status.nil?
        invalid_properties.push("invalid value for 'official_status', official_status cannot be nil.")
      end

      if @simplified_status.nil?
        invalid_properties.push("invalid value for 'simplified_status', simplified_status cannot be nil.")
      end

      if @number_of_employees.nil?
        invalid_properties.push("invalid value for 'number_of_employees', number_of_employees cannot be nil.")
      end

      if @primary_website.nil?
        invalid_properties.push("invalid value for 'primary_website', primary_website cannot be nil.")
      end

      if @registered_address.nil?
        invalid_properties.push("invalid value for 'registered_address', registered_address cannot be nil.")
      end

      if @industries.nil?
        invalid_properties.push("invalid value for 'industries', industries cannot be nil.")
      end

      if @accounts.nil?
        invalid_properties.push("invalid value for 'accounts', accounts cannot be nil.")
      end

      if @financial_summary.nil?
        invalid_properties.push("invalid value for 'financial_summary', financial_summary cannot be nil.")
      end

      if @annual_returns.nil?
        invalid_properties.push("invalid value for 'annual_returns', annual_returns cannot be nil.")
      end

      if @officers.nil?
        invalid_properties.push("invalid value for 'officers', officers cannot be nil.")
      end

      if @officer_disqualifications.nil?
        invalid_properties.push("invalid value for 'officer_disqualifications', officer_disqualifications cannot be nil.")
      end

      if @total_company_shares.nil?
        invalid_properties.push("invalid value for 'total_company_shares', total_company_shares cannot be nil.")
      end

      if @number_of_shareholders.nil?
        invalid_properties.push("invalid value for 'number_of_shareholders', number_of_shareholders cannot be nil.")
      end

      if @shareholders_greater_or_equal_ten_percent.nil?
        invalid_properties.push("invalid value for 'shareholders_greater_or_equal_ten_percent', shareholders_greater_or_equal_ten_percent cannot be nil.")
      end

      if @immediate_parents.nil?
        invalid_properties.push("invalid value for 'immediate_parents', immediate_parents cannot be nil.")
      end

      if @ultimate_parents.nil?
        invalid_properties.push("invalid value for 'ultimate_parents', ultimate_parents cannot be nil.")
      end

      if @persons_of_significant_control.nil?
        invalid_properties.push("invalid value for 'persons_of_significant_control', persons_of_significant_control cannot be nil.")
      end

      if @psc_statements.nil?
        invalid_properties.push("invalid value for 'psc_statements', psc_statements cannot be nil.")
      end

      if @portfolio_companies_count.nil?
        invalid_properties.push("invalid value for 'portfolio_companies_count', portfolio_companies_count cannot be nil.")
      end

      if @related_companies_count.nil?
        invalid_properties.push("invalid value for 'related_companies_count', related_companies_count cannot be nil.")
      end

      if @charges_count.nil?
        invalid_properties.push("invalid value for 'charges_count', charges_count cannot be nil.")
      end

      if @bank_accounts_count.nil?
        invalid_properties.push("invalid value for 'bank_accounts_count', bank_accounts_count cannot be nil.")
      end

      if @gazette_notices_count.nil?
        invalid_properties.push("invalid value for 'gazette_notices_count', gazette_notices_count cannot be nil.")
      end

      if @is_fca_authorised.nil?
        invalid_properties.push("invalid value for 'is_fca_authorised', is_fca_authorised cannot be nil.")
      end

      if @document_filing_counts.nil?
        invalid_properties.push("invalid value for 'document_filing_counts', document_filing_counts cannot be nil.")
      end

      if @peps_sanctions_check.nil?
        invalid_properties.push("invalid value for 'peps_sanctions_check', peps_sanctions_check cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @country_code.nil?
      return false if @company_id.nil?
      return false if @name.nil?
      return false if @type.nil?
      return false if @incorporation_country.nil?
      return false if @incorporation_date.nil?
      return false if @official_status.nil?
      return false if @simplified_status.nil?
      return false if @number_of_employees.nil?
      return false if @primary_website.nil?
      return false if @registered_address.nil?
      return false if @industries.nil?
      return false if @accounts.nil?
      return false if @financial_summary.nil?
      return false if @annual_returns.nil?
      return false if @officers.nil?
      return false if @officer_disqualifications.nil?
      return false if @total_company_shares.nil?
      return false if @number_of_shareholders.nil?
      return false if @shareholders_greater_or_equal_ten_percent.nil?
      return false if @immediate_parents.nil?
      return false if @ultimate_parents.nil?
      return false if @persons_of_significant_control.nil?
      return false if @psc_statements.nil?
      return false if @portfolio_companies_count.nil?
      return false if @related_companies_count.nil?
      return false if @charges_count.nil?
      return false if @bank_accounts_count.nil?
      return false if @gazette_notices_count.nil?
      return false if @is_fca_authorised.nil?
      return false if @document_filing_counts.nil?
      return false if @peps_sanctions_check.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          country_code == o.country_code &&
          company_id == o.company_id &&
          name == o.name &&
          type == o.type &&
          incorporation_country == o.incorporation_country &&
          incorporation_date == o.incorporation_date &&
          official_status == o.official_status &&
          simplified_status == o.simplified_status &&
          number_of_employees == o.number_of_employees &&
          primary_website == o.primary_website &&
          registered_address == o.registered_address &&
          industries == o.industries &&
          accounts == o.accounts &&
          financial_summary == o.financial_summary &&
          annual_returns == o.annual_returns &&
          officers == o.officers &&
          officer_disqualifications == o.officer_disqualifications &&
          total_company_shares == o.total_company_shares &&
          number_of_shareholders == o.number_of_shareholders &&
          shareholders_greater_or_equal_ten_percent == o.shareholders_greater_or_equal_ten_percent &&
          immediate_parents == o.immediate_parents &&
          ultimate_parents == o.ultimate_parents &&
          persons_of_significant_control == o.persons_of_significant_control &&
          psc_statements == o.psc_statements &&
          portfolio_companies_count == o.portfolio_companies_count &&
          related_companies_count == o.related_companies_count &&
          charges_count == o.charges_count &&
          bank_accounts_count == o.bank_accounts_count &&
          gazette_notices_count == o.gazette_notices_count &&
          is_fca_authorised == o.is_fca_authorised &&
          document_filing_counts == o.document_filing_counts &&
          peps_sanctions_check == o.peps_sanctions_check
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [country_code, company_id, name, type, incorporation_country, incorporation_date, official_status, simplified_status, number_of_employees, primary_website, registered_address, industries, accounts, financial_summary, annual_returns, officers, officer_disqualifications, total_company_shares, number_of_shareholders, shareholders_greater_or_equal_ten_percent, immediate_parents, ultimate_parents, persons_of_significant_control, psc_statements, portfolio_companies_count, related_companies_count, charges_count, bank_accounts_count, gazette_notices_count, is_fca_authorised, document_filing_counts, peps_sanctions_check].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
