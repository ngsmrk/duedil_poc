=begin
#DueDil API v4

#Welcome to the DueDil API v4, which provides programmatic access to DueDil's comprehensive company data. It can be used to enhance a wide variety of business functions, from auto-populating website forms to verifying customer credentials.  ### Getting started In order to make requests, you'll need to obtain an API key. Please visit https://www.duedil.com/api for more information. Once you have an API key, requests can be made using a UI such as [Postman](https://www.getpostman.com/) or via a terminal using [curl](https://curl.haxx.se/docs/manual.html). An example curl request should look as follows:  ``` curl -X GET --header 'Accept: application/json' --header 'X-AUTH-TOKEN: api_key' 'https://duedil.io/v4/company/gb/06999618.json' ```  ### Generating clients  This API has been authored using the [OpenAPI](https://en.wikipedia.org/wiki/OpenAPI_Specification) (Swagger) specification. Being machine readable, it can be used to generate V4 API clients in a range of languages. To create a client:   * Open the [Swagger Editor](http://editor.swagger.io/).  * Select 'File', 'Import URL' then enter https://duedil.io/v4/swagger.json  * Select 'Generate Client' then choose from over 30 languages such as PHP, Python and Java.  ### International data  DueDil provides a wide range of data spanning across multiple geographic regions. Our international package currently includes company information from the following countries:  | Country              |    | Country       |    | |----------------------|----|---------------|----| | Albania              | AL | Jersey        | JE | | Bahamas              | BS | Latvia        | LV | | Belgium              | BE | Liechtenstein | LI | | Bermuda              | BM | Luxembourg    | LU | | Hong Kong, SAR China | HK | Malta         | MT | | Cyprus               | CY | Montenegro    | ME | | Denmark              | DK | Netherlands   | NL | | Finland              | FI | Norway        | NO | | France               | FR | Poland        | PL | | Germany              | DE | Romania       | RO | | Greenland            | GL | Slovakia      | SK | | Guernsey             | GG | Slovenia      | SI | | Iceland              | IS | Sweden        | SE | | Isle of Man          | IM | Switzerland   | CH | | Israel               | IL |               |    |  Retrieving international data is simple. Construct your request with the corresponding country code. For the German company [Daimler AG](https://www.duedil.com/company/de/Stuttgart%20HRB%2019360/daimler-ag) you should construct your request URI as follows:  ``` curl -X GET --header 'Accept: application/json' --header 'X-AUTH-TOKEN: api_key' 'https://duedil.io/v4/company/de/Stuttgart%20HRB%2019360.json' ```  For Companies search, the country code should be included in the post body:  ``` {     \"criteria\": {         \"name\": \"Daimler AG\",         \"countryCodes\": {             \"values\": [\"DE\", \"FR\"]         }     } } ```  **Note:** You will need to have international access added to your plan to search for and retrieve information for companies outside of the United Kingdom (GB) and Ireland (IE).  #### Data coverage  While 100% coverage is our goal, this is not feasible for every international country at present. If we cannot find the entity you are requesting, the API will return HTTP 404 with message “Resource not found”. Partial responses can include null fields where specific data is unavailable.  ### Pagination  All endpoints that return collections can be paginated in the same way through two optional parameters (`limit` and `offset`). The `offset` parameter determines the 0-based index of the first element of the collection to be returned, which defaults to 0. The `limit` parameter sets the maximum number of items from the collection to be returned, which defaults to 10. The maximum allowed limit parameter is 50.  **Note:** API keys issued for evaluation purposes will have limited access to the first 10 search results only. Other non-search endpoints do not apply this constraint.   Every response from a paginated endpoint contains a top-level property called `pagination`, which in turn contains the `offset` and `limit` values used in the API call, as well as the `total` number of items in the collection. For instance:   ``` \"pagination\": {   \"offset\": 0,   \"limit\": 10,   \"total\": 12 } ```   In the example above, an API call with `offset` = 10 and `limit` = 10 would return the 11th and 12th items in the collection, whereas an API call with `offset` = 20 and `limit` = 10 would return a successful response (200 HTTP code) with an empty collection. Calls with invalid `offset`/`limit` parameters, such as negative values, return an error (400 HTTP code). 

OpenAPI spec version: 4.4.19

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class EssentialsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Company addresses
    # Get addresses for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @return [CompanyAddressesResponse]
    def company_country_code_company_id_addresses_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_addresses_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company addresses
    # Get addresses for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @return [Array<(CompanyAddressesResponse, Fixnum, Hash)>] CompanyAddressesResponse data, response status code and response headers
    def company_country_code_company_id_addresses_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_addresses_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_addresses_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_addresses_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_addresses_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/addresses.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyAddressesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_addresses_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company descriptions
    # Get descriptions for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @return [CompanyDescriptionsResponse]
    def company_country_code_company_id_descriptions_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_descriptions_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company descriptions
    # Get descriptions for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @return [Array<(CompanyDescriptionsResponse, Fixnum, Hash)>] CompanyDescriptionsResponse data, response status code and response headers
    def company_country_code_company_id_descriptions_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_descriptions_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_descriptions_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_descriptions_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_descriptions_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/descriptions.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyDescriptionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_descriptions_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company vitals
    # Get key information for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @return [CompanyResponse]
    def company_country_code_company_id_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company vitals
    # Get key information for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompanyResponse, Fixnum, Hash)>] CompanyResponse data, response status code and response headers
    def company_country_code_company_id_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company industries
    # Get industries for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @option opts [Array<String>] :types List of industry classification systems to include if available
    # @return [CompanyIndustriesResponse]
    def company_country_code_company_id_industries_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_industries_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company industries
    # Get industries for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @option opts [Array<String>] :types List of industry classification systems to include if available
    # @return [Array<(CompanyIndustriesResponse, Fixnum, Hash)>] CompanyIndustriesResponse data, response status code and response headers
    def company_country_code_company_id_industries_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_industries_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_industries_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_industries_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_industries_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      if @api_client.config.client_side_validation && opts[:'types'] && !opts[:'types'].all?{|item| ['SIC2003', 'SIC2007', 'NACE', 'NAF'].include?(item)}
        fail ArgumentError, 'invalid value for "types", must include one of SIC2003, SIC2007, NACE, NAF'
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/industries.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'types'] = @api_client.build_collection_param(opts[:'types'], :csv) if !opts[:'types'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyIndustriesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_industries_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company keywords
    # Get keywords associated with a given company 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @return [CompanyKeywordsResponse]
    def company_country_code_company_id_keywords_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_keywords_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company keywords
    # Get keywords associated with a given company 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @return [Array<(CompanyKeywordsResponse, Fixnum, Hash)>] CompanyKeywordsResponse data, response status code and response headers
    def company_country_code_company_id_keywords_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_keywords_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_keywords_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_keywords_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_keywords_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/keywords.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyKeywordsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_keywords_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company officers
    # Get officers and their appointments for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @option opts [Array<String>] :appointment_statuses List of appointment statuses to include
    # @return [CompanyOfficersResponse]
    def company_country_code_company_id_officers_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_officers_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company officers
    # Get officers and their appointments for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @option opts [Array<String>] :appointment_statuses List of appointment statuses to include
    # @return [Array<(CompanyOfficersResponse, Fixnum, Hash)>] CompanyOfficersResponse data, response status code and response headers
    def company_country_code_company_id_officers_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_officers_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_officers_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_officers_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_officers_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      if @api_client.config.client_side_validation && opts[:'appointment_statuses'] && !opts[:'appointment_statuses'].all?{|item| ['open', 'closed', 'retired'].include?(item)}
        fail ArgumentError, 'invalid value for "appointment_statuses", must include one of open, closed, retired'
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/officers.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'appointmentStatuses'] = @api_client.build_collection_param(opts[:'appointment_statuses'], :csv) if !opts[:'appointment_statuses'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyOfficersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_officers_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company registered names
    # Get registered names for a company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @return [CompanyRegisteredNamesResponse]
    def company_country_code_company_id_registered_names_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_registered_names_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company registered names
    # Get registered names for a company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @return [Array<(CompanyRegisteredNamesResponse, Fixnum, Hash)>] CompanyRegisteredNamesResponse data, response status code and response headers
    def company_country_code_company_id_registered_names_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_registered_names_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_registered_names_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_registered_names_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_registered_names_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/registered-names.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyRegisteredNamesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_registered_names_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company related names
    # Get related names for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @return [CompanyRelatedNamesResponse]
    def company_country_code_company_id_related_names_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_related_names_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company related names
    # Get related names for a given company. 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @return [Array<(CompanyRelatedNamesResponse, Fixnum, Hash)>] CompanyRelatedNamesResponse data, response status code and response headers
    def company_country_code_company_id_related_names_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_related_names_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_related_names_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_related_names_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_related_names_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/related-names.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyRelatedNamesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_related_names_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company social media profiles
    # Get social media profiles for a given company.
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @option opts [Array<String>] :platforms List of platforms to include
    # @return [CompanySocialMediaProfilesResponse]
    def company_country_code_company_id_social_media_profiles_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_social_media_profiles_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company social media profiles
    # Get social media profiles for a given company.
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @option opts [Array<String>] :platforms List of platforms to include
    # @return [Array<(CompanySocialMediaProfilesResponse, Fixnum, Hash)>] CompanySocialMediaProfilesResponse data, response status code and response headers
    def company_country_code_company_id_social_media_profiles_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_social_media_profiles_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_social_media_profiles_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_social_media_profiles_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_social_media_profiles_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      if @api_client.config.client_side_validation && opts[:'platforms'] && !opts[:'platforms'].all?{|item| ['facebook', 'twitter', 'linkedin'].include?(item)}
        fail ArgumentError, 'invalid value for "platforms", must include one of facebook, twitter, linkedin'
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/social-media-profiles.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'platforms'] = @api_client.build_collection_param(opts[:'platforms'], :csv) if !opts[:'platforms'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanySocialMediaProfilesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_social_media_profiles_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company telephone numbers
    # Get telephone numbers associated with a given company 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @return [CompanyTelephoneNumbersResponse]
    def company_country_code_company_id_telephone_numbers_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_telephone_numbers_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company telephone numbers
    # Get telephone numbers associated with a given company 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @return [Array<(CompanyTelephoneNumbersResponse, Fixnum, Hash)>] CompanyTelephoneNumbersResponse data, response status code and response headers
    def company_country_code_company_id_telephone_numbers_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_telephone_numbers_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_telephone_numbers_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_telephone_numbers_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_telephone_numbers_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/telephone-numbers.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyTelephoneNumbersResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_telephone_numbers_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Company websites
    # Get websites associated with a given company 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @return [CompanyWebsitesResponse]
    def company_country_code_company_id_websites_format_get(country_code, company_id, format, opts = {})
      data, _status_code, _headers = company_country_code_company_id_websites_format_get_with_http_info(country_code, company_id, format, opts)
      return data
    end

    # Company websites
    # Get websites associated with a given company 
    # @param country_code [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code in lowercase.
    # @param company_id Company registration number
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @return [Array<(CompanyWebsitesResponse, Fixnum, Hash)>] CompanyWebsitesResponse data, response status code and response headers
    def company_country_code_company_id_websites_format_get_with_http_info(country_code, company_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.company_country_code_company_id_websites_format_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling EssentialsApi.company_country_code_company_id_websites_format_get"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        fail ArgumentError, "Missing the required parameter 'company_id' when calling EssentialsApi.company_country_code_company_id_websites_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.company_country_code_company_id_websites_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/company/{countryCode}/{companyId}/websites.{format}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CompanyWebsitesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#company_country_code_company_id_websites_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Officer appointments
    # Get all companies and appointments for a given officer.
    # @param officer_id Officer id
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned (default to 0)
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call (default to 10)
    # @option opts [Array<String>] :appointment_statuses List of appointment statuses to include
    # @return [OfficerCompaniesResponse]
    def officer_officer_id_companies_format_get(officer_id, format, opts = {})
      data, _status_code, _headers = officer_officer_id_companies_format_get_with_http_info(officer_id, format, opts)
      return data
    end

    # Officer appointments
    # Get all companies and appointments for a given officer.
    # @param officer_id Officer id
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset Determines the 0-based index of the first element of the collection to be returned
    # @option opts [Integer] :limit Configures the maximum number of items from the collection to be returned in the given API call
    # @option opts [Array<String>] :appointment_statuses List of appointment statuses to include
    # @return [Array<(OfficerCompaniesResponse, Fixnum, Hash)>] OfficerCompaniesResponse data, response status code and response headers
    def officer_officer_id_companies_format_get_with_http_info(officer_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.officer_officer_id_companies_format_get ..."
      end
      # verify the required parameter 'officer_id' is set
      if @api_client.config.client_side_validation && officer_id.nil?
        fail ArgumentError, "Missing the required parameter 'officer_id' when calling EssentialsApi.officer_officer_id_companies_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.officer_officer_id_companies_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      if @api_client.config.client_side_validation && opts[:'appointment_statuses'] && !opts[:'appointment_statuses'].all?{|item| ['open', 'closed', 'retired'].include?(item)}
        fail ArgumentError, 'invalid value for "appointment_statuses", must include one of open, closed, retired'
      end
      # resource path
      local_var_path = "/officer/{officerId}/companies.{format}".sub('{' + 'officerId' + '}', officer_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'appointmentStatuses'] = @api_client.build_collection_param(opts[:'appointment_statuses'], :csv) if !opts[:'appointment_statuses'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OfficerCompaniesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#officer_officer_id_companies_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Officer vitals
    # Get key information for a given officer. Note that an officer can be either a person or a company acting as a corporate officer. **WARNING: We plan to make non-backwards compatible changes to officer identifiers in the near future to accommodate data from other countries.** 
    # @param officer_id Officer id
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @return [OfficerResponse]
    def officer_officer_id_format_get(officer_id, format, opts = {})
      data, _status_code, _headers = officer_officer_id_format_get_with_http_info(officer_id, format, opts)
      return data
    end

    # Officer vitals
    # Get key information for a given officer. Note that an officer can be either a person or a company acting as a corporate officer. **WARNING: We plan to make non-backwards compatible changes to officer identifiers in the near future to accommodate data from other countries.** 
    # @param officer_id Officer id
    # @param format Response format. Currently, only supported option is json.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OfficerResponse, Fixnum, Hash)>] OfficerResponse data, response status code and response headers
    def officer_officer_id_format_get_with_http_info(officer_id, format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EssentialsApi.officer_officer_id_format_get ..."
      end
      # verify the required parameter 'officer_id' is set
      if @api_client.config.client_side_validation && officer_id.nil?
        fail ArgumentError, "Missing the required parameter 'officer_id' when calling EssentialsApi.officer_officer_id_format_get"
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling EssentialsApi.officer_officer_id_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # resource path
      local_var_path = "/officer/{officerId}.{format}".sub('{' + 'officerId' + '}', officer_id.to_s).sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OfficerResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EssentialsApi#officer_officer_id_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
