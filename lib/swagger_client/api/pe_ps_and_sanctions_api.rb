=begin
#DueDil API v4

#Welcome to the DueDil API v4, which provides programmatic access to DueDil's comprehensive company data. It can be used to enhance a wide variety of business functions, from auto-populating website forms to verifying customer credentials.  ### Getting started In order to make requests, you'll need to obtain an API key. Please visit https://www.duedil.com/api for more information. Once you have an API key, requests can be made using a UI such as [Postman](https://www.getpostman.com/) or via a terminal using [curl](https://curl.haxx.se/docs/manual.html). An example curl request should look as follows:  ``` curl -X GET --header 'Accept: application/json' --header 'X-AUTH-TOKEN: api_key' 'https://duedil.io/v4/company/gb/06999618.json' ```  ### Generating clients  This API has been authored using the [OpenAPI](https://en.wikipedia.org/wiki/OpenAPI_Specification) (Swagger) specification. Being machine readable, it can be used to generate V4 API clients in a range of languages. To create a client:   * Open the [Swagger Editor](http://editor.swagger.io/).  * Select 'File', 'Import URL' then enter https://duedil.io/v4/swagger.json  * Select 'Generate Client' then choose from over 30 languages such as PHP, Python and Java.  ### International data  DueDil provides a wide range of data spanning across multiple geographic regions. Our international package currently includes company information from the following countries:  | Country              |    | Country       |    | |----------------------|----|---------------|----| | Albania              | AL | Jersey        | JE | | Bahamas              | BS | Latvia        | LV | | Belgium              | BE | Liechtenstein | LI | | Bermuda              | BM | Luxembourg    | LU | | Hong Kong, SAR China | HK | Malta         | MT | | Cyprus               | CY | Montenegro    | ME | | Denmark              | DK | Netherlands   | NL | | Finland              | FI | Norway        | NO | | France               | FR | Poland        | PL | | Germany              | DE | Romania       | RO | | Greenland            | GL | Slovakia      | SK | | Guernsey             | GG | Slovenia      | SI | | Iceland              | IS | Sweden        | SE | | Isle of Man          | IM | Switzerland   | CH | | Israel               | IL |               |    |  Retrieving international data is simple. Construct your request with the corresponding country code. For the German company [Daimler AG](https://www.duedil.com/company/de/Stuttgart%20HRB%2019360/daimler-ag) you should construct your request URI as follows:  ``` curl -X GET --header 'Accept: application/json' --header 'X-AUTH-TOKEN: api_key' 'https://duedil.io/v4/company/de/Stuttgart%20HRB%2019360.json' ```  For Companies search, the country code should be included in the post body:  ``` {     \"criteria\": {         \"name\": \"Daimler AG\",         \"countryCodes\": {             \"values\": [\"DE\", \"FR\"]         }     } } ```  **Note:** You will need to have international access added to your plan to search for and retrieve information for companies outside of the United Kingdom (GB) and Ireland (IE).  #### Data coverage  While 100% coverage is our goal, this is not feasible for every international country at present. If we cannot find the entity you are requesting, the API will return HTTP 404 with message “Resource not found”. Partial responses can include null fields where specific data is unavailable.  ### Pagination  All endpoints that return collections can be paginated in the same way through two optional parameters (`limit` and `offset`). The `offset` parameter determines the 0-based index of the first element of the collection to be returned, which defaults to 0. The `limit` parameter sets the maximum number of items from the collection to be returned, which defaults to 10. The maximum allowed limit parameter is 50.  **Note:** API keys issued for evaluation purposes will have limited access to the first 10 search results only. Other non-search endpoints do not apply this constraint.   Every response from a paginated endpoint contains a top-level property called `pagination`, which in turn contains the `offset` and `limit` values used in the API call, as well as the `total` number of items in the collection. For instance:   ``` \"pagination\": {   \"offset\": 0,   \"limit\": 10,   \"total\": 12 } ```   In the example above, an API call with `offset` = 10 and `limit` = 10 would return the 11th and 12th items in the collection, whereas an API call with `offset` = 20 and `limit` = 10 would return a successful response (200 HTTP code) with an empty collection. Calls with invalid `offset`/`limit` parameters, such as negative values, return an error (400 HTTP code). 

OpenAPI spec version: 4.4.19

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class PEPsAndSanctionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # PEPs and Sanctions business lookup
    # Runs a lookup for business with PEPs or sanctions by lookup ID. ### Sandbox The sandbox environment returns static historical data for a predefined business.  All other requests will result in a not found response (HTTP 404).  - Sabtina Ltd - lookupId: **DD-677a7e01005c**
    # @param format Response format. Currently, only supported option is json.
    # @param lookup_id Business or Individual lookup ID
    # @param [Hash] opts the optional parameters
    # @return [PEPsAndSanctionsBusinessLookupResponse]
    def peps_sanctions_business_lookup_id_format_get(format, lookup_id, opts = {})
      data, _status_code, _headers = peps_sanctions_business_lookup_id_format_get_with_http_info(format, lookup_id, opts)
      return data
    end

    # PEPs and Sanctions business lookup
    # Runs a lookup for business with PEPs or sanctions by lookup ID. ### Sandbox The sandbox environment returns static historical data for a predefined business.  All other requests will result in a not found response (HTTP 404).  - Sabtina Ltd - lookupId: **DD-677a7e01005c**
    # @param format Response format. Currently, only supported option is json.
    # @param lookup_id Business or Individual lookup ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PEPsAndSanctionsBusinessLookupResponse, Fixnum, Hash)>] PEPsAndSanctionsBusinessLookupResponse data, response status code and response headers
    def peps_sanctions_business_lookup_id_format_get_with_http_info(format, lookup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PEPsAndSanctionsApi.peps_sanctions_business_lookup_id_format_get ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling PEPsAndSanctionsApi.peps_sanctions_business_lookup_id_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # verify the required parameter 'lookup_id' is set
      if @api_client.config.client_side_validation && lookup_id.nil?
        fail ArgumentError, "Missing the required parameter 'lookup_id' when calling PEPsAndSanctionsApi.peps_sanctions_business_lookup_id_format_get"
      end
      # resource path
      local_var_path = "/peps-sanctions/business/{lookupId}.{format}".sub('{' + 'format' + '}', format.to_s).sub('{' + 'lookupId' + '}', lookup_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PEPsAndSanctionsBusinessLookupResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PEPsAndSanctionsApi#peps_sanctions_business_lookup_id_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PEPs and Sanctions individuals lookup
    # Runs a lookup for individuals with PEPs or sanctions by lookup ID. ### Sandbox The sandbox environment returns static historical data for a predefined individual.  All other requests will result in a not found response (HTTP 404). Personal information relating to individuals such as address and email has been replaced with the following string: `<obfuscated>`  - David Cameron - lookupId: **DD-617b78020152** 
    # @param format Response format. Currently, only supported option is json.
    # @param lookup_id Business or Individual lookup ID
    # @param [Hash] opts the optional parameters
    # @return [PEPsAndSanctionsIndividualLookupResponse]
    def peps_sanctions_individual_lookup_id_format_get(format, lookup_id, opts = {})
      data, _status_code, _headers = peps_sanctions_individual_lookup_id_format_get_with_http_info(format, lookup_id, opts)
      return data
    end

    # PEPs and Sanctions individuals lookup
    # Runs a lookup for individuals with PEPs or sanctions by lookup ID. ### Sandbox The sandbox environment returns static historical data for a predefined individual.  All other requests will result in a not found response (HTTP 404). Personal information relating to individuals such as address and email has been replaced with the following string: &#x60;&lt;obfuscated&gt;&#x60;  - David Cameron - lookupId: **DD-617b78020152** 
    # @param format Response format. Currently, only supported option is json.
    # @param lookup_id Business or Individual lookup ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PEPsAndSanctionsIndividualLookupResponse, Fixnum, Hash)>] PEPsAndSanctionsIndividualLookupResponse data, response status code and response headers
    def peps_sanctions_individual_lookup_id_format_get_with_http_info(format, lookup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PEPsAndSanctionsApi.peps_sanctions_individual_lookup_id_format_get ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling PEPsAndSanctionsApi.peps_sanctions_individual_lookup_id_format_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # verify the required parameter 'lookup_id' is set
      if @api_client.config.client_side_validation && lookup_id.nil?
        fail ArgumentError, "Missing the required parameter 'lookup_id' when calling PEPsAndSanctionsApi.peps_sanctions_individual_lookup_id_format_get"
      end
      # resource path
      local_var_path = "/peps-sanctions/individual/{lookupId}.{format}".sub('{' + 'format' + '}', format.to_s).sub('{' + 'lookupId' + '}', lookup_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PEPsAndSanctionsIndividualLookupResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PEPsAndSanctionsApi#peps_sanctions_individual_lookup_id_format_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PEPs and Sanctions businesses search
    # Runs a search for business with PEPs or sanctions. ### Sandbox The sandbox environment returns static historical data for 2 predefined businesses.  All other requests will result in a not found response (HTTP 404).  - **Businesses Search - DueDil Company**   ```   {     \"criteria\": {       \"duedilCompany\": {         \"companyId\": \"01794877\",         \"countryCode\": \"gb\"       }     }    }   ```    ---  - **Businesses Search - Any Business**   ```   {     \"criteria\": {        \"anyBusiness\": {         \"name\": \"Gazprom Media Holding\",         \"countryCode\": \"ru\"       }     }   }   ```    --- 
    # @param format Response format. Currently, only supported option is json.
    # @param peps_and_sanctions_businesses Details about a business and their address to conduct an PEPs and Sanctions check.
    # @param [Hash] opts the optional parameters
    # @return [PEPsAndSanctionsBusinessSearchResponse]
    def peps_sanctions_search_businesses_format_post(format, peps_and_sanctions_businesses, opts = {})
      data, _status_code, _headers = peps_sanctions_search_businesses_format_post_with_http_info(format, peps_and_sanctions_businesses, opts)
      return data
    end

    # PEPs and Sanctions businesses search
    # Runs a search for business with PEPs or sanctions. ### Sandbox The sandbox environment returns static historical data for 2 predefined businesses.  All other requests will result in a not found response (HTTP 404).  - **Businesses Search - DueDil Company**   &#x60;&#x60;&#x60;   {     \&quot;criteria\&quot;: {       \&quot;duedilCompany\&quot;: {         \&quot;companyId\&quot;: \&quot;01794877\&quot;,         \&quot;countryCode\&quot;: \&quot;gb\&quot;       }     }    }   &#x60;&#x60;&#x60;    ---  - **Businesses Search - Any Business**   &#x60;&#x60;&#x60;   {     \&quot;criteria\&quot;: {        \&quot;anyBusiness\&quot;: {         \&quot;name\&quot;: \&quot;Gazprom Media Holding\&quot;,         \&quot;countryCode\&quot;: \&quot;ru\&quot;       }     }   }   &#x60;&#x60;&#x60;    --- 
    # @param format Response format. Currently, only supported option is json.
    # @param peps_and_sanctions_businesses Details about a business and their address to conduct an PEPs and Sanctions check.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PEPsAndSanctionsBusinessSearchResponse, Fixnum, Hash)>] PEPsAndSanctionsBusinessSearchResponse data, response status code and response headers
    def peps_sanctions_search_businesses_format_post_with_http_info(format, peps_and_sanctions_businesses, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PEPsAndSanctionsApi.peps_sanctions_search_businesses_format_post ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling PEPsAndSanctionsApi.peps_sanctions_search_businesses_format_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # verify the required parameter 'peps_and_sanctions_businesses' is set
      if @api_client.config.client_side_validation && peps_and_sanctions_businesses.nil?
        fail ArgumentError, "Missing the required parameter 'peps_and_sanctions_businesses' when calling PEPsAndSanctionsApi.peps_sanctions_search_businesses_format_post"
      end
      # resource path
      local_var_path = "/peps-sanctions/search/businesses.{format}".sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(peps_and_sanctions_businesses)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PEPsAndSanctionsBusinessSearchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PEPsAndSanctionsApi#peps_sanctions_search_businesses_format_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PEPs and Sanctions individuals search
    # Runs a search for individuals with PEPs or sanctions. ### Sandbox The sandbox environment returns static historical data for 2 predefined individuals. All other requests will result in a not found response (HTTP 404). Personal information relating to individuals such as address and email has been replaced with the following string: `<obfuscated>`  - **Individuals Search - DueDil Officer**   ```    {     \"criteria\": {       \"duedilOfficer\": {         \"officerId\": \"915779948\"       }      }   }    ```    ---  - **Individuals Search - Any Individual**   ```    {     \"criteria\": {       \"anyIndividual\": {         \"firstName\": \"David\",         \"lastName\": \"Cameron\",         \"dateOfBirth\": {           \"year\": 1966         }       }     }   }   ```    --- 
    # @param format Response format. Currently, only supported option is json.
    # @param peps_and_sanctions_individuals Details about an individual and their address to conduct an PEPs and Sanctions check.
    # @param [Hash] opts the optional parameters
    # @return [PEPsAndSanctionsIndividualSearchResponse]
    def peps_sanctions_search_individuals_format_post(format, peps_and_sanctions_individuals, opts = {})
      data, _status_code, _headers = peps_sanctions_search_individuals_format_post_with_http_info(format, peps_and_sanctions_individuals, opts)
      return data
    end

    # PEPs and Sanctions individuals search
    # Runs a search for individuals with PEPs or sanctions. ### Sandbox The sandbox environment returns static historical data for 2 predefined individuals. All other requests will result in a not found response (HTTP 404). Personal information relating to individuals such as address and email has been replaced with the following string: &#x60;&lt;obfuscated&gt;&#x60;  - **Individuals Search - DueDil Officer**   &#x60;&#x60;&#x60;    {     \&quot;criteria\&quot;: {       \&quot;duedilOfficer\&quot;: {         \&quot;officerId\&quot;: \&quot;915779948\&quot;       }      }   }    &#x60;&#x60;&#x60;    ---  - **Individuals Search - Any Individual**   &#x60;&#x60;&#x60;    {     \&quot;criteria\&quot;: {       \&quot;anyIndividual\&quot;: {         \&quot;firstName\&quot;: \&quot;David\&quot;,         \&quot;lastName\&quot;: \&quot;Cameron\&quot;,         \&quot;dateOfBirth\&quot;: {           \&quot;year\&quot;: 1966         }       }     }   }   &#x60;&#x60;&#x60;    --- 
    # @param format Response format. Currently, only supported option is json.
    # @param peps_and_sanctions_individuals Details about an individual and their address to conduct an PEPs and Sanctions check.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PEPsAndSanctionsIndividualSearchResponse, Fixnum, Hash)>] PEPsAndSanctionsIndividualSearchResponse data, response status code and response headers
    def peps_sanctions_search_individuals_format_post_with_http_info(format, peps_and_sanctions_individuals, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PEPsAndSanctionsApi.peps_sanctions_search_individuals_format_post ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling PEPsAndSanctionsApi.peps_sanctions_search_individuals_format_post"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['json'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of json"
      end
      # verify the required parameter 'peps_and_sanctions_individuals' is set
      if @api_client.config.client_side_validation && peps_and_sanctions_individuals.nil?
        fail ArgumentError, "Missing the required parameter 'peps_and_sanctions_individuals' when calling PEPsAndSanctionsApi.peps_sanctions_search_individuals_format_post"
      end
      # resource path
      local_var_path = "/peps-sanctions/search/individuals.{format}".sub('{' + 'format' + '}', format.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(peps_and_sanctions_individuals)
      auth_names = ['UserSecurity']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PEPsAndSanctionsIndividualSearchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PEPsAndSanctionsApi#peps_sanctions_search_individuals_format_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
